./app/layout.tsx:
import type { Metadata } from "next";
import localFont from 'next/font/local';
import "./globals.css";

const pelak = localFont({
  src: '../public/fonts/Pelak.woff2',
  variable: '--font-prlak-bold',
})

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="fa">
      <body
        className={`${pelak.className} antialiased bg-slate-50`}
      >
        {children}
      </body>
    </html>
  );
}

./app/(pages)/(menu)/ToggleShow.tsx:
import Image from "next/image";

interface Prop {
    Icon: string;
    title?: string;
}

export const ToggleShow = ({Icon, title}:Prop) => {
    return (
        <div className="flex flex-col w-[100px] items-center gap-2.5 relative">
          <div className="relative w-[100px] h-[100px] bg-[#B9D0AA] rounded-[50px] shadow-[-6px_7px_21px_-6px_#1a604e,2px_-1px_66.3px_18px_#ffffff]">
            <Image
              className="absolute w-[51px] h-[51px] top-6 left-6"
              alt="Fluent person"
              src={Icon}
            />
          </div>

          <div className="inline-flex items-center justify-center gap-2.5 p-2.5 relative flex-[0_0_auto] ml-[-27.50px] mr-[-27.50px]">
            <div className="relative w-fit mt-[-1.00px]  font-medium text-black text-[21px] tracking-[0] leading-[normal] [direction:rtl]">
              {title}
            </div>
          </div>
        </div>
    )
}

./app/(pages)/(menu)/page.tsx:
import { SpeakAI, Sport, PersonWalking, ExerciseWalkingSupport, Food } from "@/public/icons";

import { MainCarousel } from "./Carousel";

import { ToggleShow } from "./ToggleShow";
import { PersonCard } from "./PersonCard";
import { MoreInfo } from "./MoreInfo";
import { GroupShow } from "./GroupShow";
import { JSX } from "react";

const Page = (): JSX.Element => {
    const toggles = [
        {title: 'الگوهای حرکتی', icon: PersonWalking},
        {title: 'گفتار درمانی', icon: SpeakAI},
        {title: 'فیزیوتراپی', icon: Sport},
        {title: 'کاردرمانی', icon: ExerciseWalkingSupport},
        {title: 'تغذیه', icon: Food},
    ]
  return (
    <div className="flex flex-col w-[1220px] items-center gap-[71px]">
      <MainCarousel/>
      <div className="flex items-center gap-40">
        {toggles.map((data, index) => (
            <ToggleShow title={data.title} Icon={data.icon} key={index} />
        ))}
      </div>

      <div className="flex gap-[19px] pl-[19px] pr-[19px] py-[23px] w-full bg-[#1a604eba] rounded-[15px]">
        <div className="flex-1 overflow-x-auto scroll-smooth">
            <div className="flex gap-[13px] flex-nowrap w-[100%]">
            {Array.from({ length: 4 }, (_, i) => (
                <div key={i} className="flex-shrink-0">
                  <PersonCard />
                </div>
            ))}
            </div>
    </div>

  <div className="inline-flex justify-center gap-2.5 p-2.5 items-center relative flex-[0_0_auto]">
    <p className="w-fit [font-family:'Pelak-SemiBold',Helvetica] font-normal text-white text-[50px] text-center relative mt-[-1.00px] tracking-[0] leading-[normal] [direction:rtl]">
      <span className="font-semibold">
        آموزش های
        <br />
      </span>
      <span className="[font-family:'Pelak-Black',Helvetica] font-black">
        ویژه شما
      </span>
    </p>
  </div>
</div>

      <MoreInfo/>

      <GroupShow/>

      <div className="flex gap-[19px] pl-[19px] pr-[19px] py-[23px] w-full bg-[#1a604eba] rounded-[15px]">
        <div className="flex-1 overflow-x-auto scroll-smooth">
            <div className="flex gap-[13px] flex-nowrap">
            {Array.from({ length: 4 }, (_, i) => (
                <div key={i} className="flex-shrink-0">
                <PersonCard />
                </div>
            ))}
            </div>
    </div>

  <div className="inline-flex justify-center gap-2.5 p-2.5 items-center relative flex-[0_0_auto]">
    <p className="w-fit [font-family:'Pelak-SemiBold',Helvetica] font-normal text-white text-[50px] text-center relative mt-[-1.00px] tracking-[0] leading-[normal] [direction:rtl]">
      <span className="font-semibold">
      پربازدید ترین
        <br />
      </span>
      <span className="[font-family:'Pelak-Black',Helvetica] font-black">
        ویدیو ها
      </span>
    </p>
  </div>
</div>

      <GroupShow/>
    </div>
  );
};

export default Page;


./app/(pages)/(menu)/GroupShow.tsx:
import { ArrowDown } from "@/public/icons";
import { PersonCard } from "./PersonCard";
import Image from "next/image";

export const GroupShow = () => {
    return (
        <div className="flex flex-col w-full items-start gap-2.5 relative flex-[0_0_auto]">
        <div className="flex items-center justify-between relative self-stretch w-full flex-[0_0_auto] z-[1]">
        <div className="flex items-center gap-2">
            <Image className="w-6 h-6" src={ArrowDown} alt="arrow icon" style={{transform:'rotate(90deg)'}} />
            <div className="font-pelak text-[#1a604e] text-base text-right">
              ویدیو های بیشتر
            </div>
          </div>

          <div className="inline-flex justify-center gap-2.5 p-2.5 items-center relative flex-[0_0_auto]">
            <div className="w-fit  font-medium text-black text-[32px] relative mt-[-1.00px] tracking-[0] leading-[normal] [direction:rtl]">
              تغذیه
            </div>
          </div>
        </div>

        <div className="flex items-center justify-between relative self-stretch w-full flex-[0_0_auto] z-0 overflow-x-scroll">
        <div className="flex-1 overflow-x-auto scroll-smooth">
            <div className="flex gap-12 flex-nowrap justify-center">
            {Array.from({ length: 3 }, (_, i) => (
                <div key={i} className="flex-shrink-0">
                <PersonCard />
                </div>
            ))}
            </div>
    </div>
        </div>
      </div>
    )
}

./app/(pages)/(menu)/Carousel.tsx:
"use client"
import "react-responsive-carousel/lib/styles/carousel.min.css";
import { Carousel } from 'react-responsive-carousel';
import Main1 from '@/public/imgs/menu/main1.png';
import Main2 from '@/public/imgs/menu/main2.png';
import Image from "next/image";

export const MainCarousel = () => {
    return (
        <Carousel autoPlay infiniteLoop showArrows showThumbs={false}>
            <div>
                <Image src={Main1} alt="carousel" style={{borderRadius: '2rem'}} />
            </div>
            <div>
                <Image src={Main2} alt="carousel" style={{borderRadius: '2rem'}} />
            </div>
        </Carousel>
    );
  }

./app/(pages)/(menu)/PersonCard.tsx:
import { Clock } from "@/public/icons";
import Rectangle from "@/public/imgs/menu/rectangle.png";
import Image from "next/image";

export const PersonCard = () => {
    return (
        <div className="flex flex-col py-[20px] px-3.5 rounded-[15px] bg-[#B9D0AA]" style={{width:'370px'}}>
            <Image
              src={Rectangle}
              alt="person card"
            />
            <div className="flex flex-col justify-between">
              <div className="inline-flex flex-col items-end gap-2.5">
                <div className="flex w-[214px] items-center justify-center gap-2.5">
                  <div className="flex-1 font-medium text-black text-[21px] mt-[-1.00px] ">
                    رژیم بیماران پارکینسون
                  </div>
                </div>

              </div>
              <div className="flex gap-30 mt-6">
              <div className="flex w-[83px] items-center gap-1.5">
                <p className="whitespace-nowrap font-medium text-[#0000008f]">
                  دقیقه ۱۵
                </p>
                <Image
                  alt="Lucide clock"
                  src={Clock}
                  width={20}
                />
              </div>

                <div className="flex w-[79px] items-center justify-center gap-2.5">
                  <div className="whitespace-nowrap mt-[-1.00px] font-medium text-[#0000008f]">
                    1 هفته پیش
                  </div>
                </div>
              </div>
            </div>
        </div>
    )
}



./app/(pages)/(menu)/MoreInfo.tsx:
import { Button } from "@/app/components";

export const MoreInfo = () => {
  return (
    <div className="flex flex-col items-center w-full">
      <div className="w-full flex justify-between gap-8">
        {/* Card 1 */}
        <div className="relative w-full max-w-[calc(50%-16px)] h-[40vh] rounded-[2%]">
          <div
            className={`absolute inset-0 rounded-[2%] bg-[url(/imgs/menu/events.png)] bg-cover bg-[50%_50%]`}
          />
          <div className="absolute inset-0 rounded-[2%] [background:linear-gradient(90deg,rgb(185,208,170)_0%,rgb(185,208,170)_45.16%,rgba(185,208,170,0)_100%)]" />
          <div className="flex flex-col items-start gap-[2rem] absolute top-[10%] left-[10%]">
            <p className="text-[#1a604e] text-[2rem] leading-normal [direction:rtl]">
              <span className="font-semibold">
                رویداد ها <br />و همایش های <br />
              </span>
              <span className="font-black">
                خانواده پارکینسون
              </span>
            </p>
            <Button
              className="shadow-[-6px_7px_21px_-6px_#1a604e] bg-dark-green"
              text="اطلاعات بیشتر"
            />
          </div>
        </div>

        {/* Card 2 */}
        <div className="relative w-full max-w-[calc(50%-16px)] h-[40vh] rounded-[2%]">
          <div
            className={`absolute inset-0 rounded-[2%] bg-[url(/imgs/menu/kargah.png)] bg-cover bg-[50%_50%]`}
          />
          <div className="absolute inset-0 rounded-[2%] [background:linear-gradient(-90deg,rgb(26,96,78)_0%,rgb(26,96,78)_44.27%,rgba(26,96,78,0.67)_62.02%,rgba(26,96,78,0)_100%)]" />
          <div className="flex flex-col items-end gap-[2rem] absolute top-[10%] right-[10%]">
            <p className="text-white text-[2rem] leading-normal [direction:rtl]">
              <span className="font-semibold">
                کارگاه های <br />حضوری و آنلاین <br />
              </span>
              <span className="font-black">
                زندگی با پارکینسون
              </span>
            </p>
            <Button
              className="shadow-[-6px_7px_21px_-6px_#1a604e]"
              text="اطلاعات بیشتر"
              variant="secondary"
            />
          </div>
        </div>
      </div>
    </div>
  );
};


./app/(pages)/(menu)/layout.tsx:
import { Header, NavBar } from "@/app/components";
import { ReactNode } from "react";

interface Prop {
  haveTabs?: boolean;
  children: ReactNode
}

const Layout = ({children}:Prop) => {
  return (
    <>
      <div className="flex justify-between">
        <div className="flex w-full flex-col items-center gap-6">
          <Header
            userName={"joe rp"}
            userId={20938457}
            className="px-10 py-5"
          />
          <div className="flex flex-col justify-center w-[95%] mx-8 rounded-[2.1875rem] p-8 border border-[#00000010] bg-white shadow-[8px_-23px_81.4px_#FFF,_-8px_23px_81.4px_rgba(26,_96,_78,_0.10)]">
            {children}
          </div>
        </div>

        <NavBar className="shadow-left fixed top-0 right-0 z-50 bg-white pt-3" />
      </div>
    </>
  );
};

export default Layout;


./app/(pages)/wents/page.tsx:
import { Went } from "./Went";

const WentsPage = () => {
    return (
        <div className="flex flex-col gap-6">
            <Went/>
            <Went/>
        </div>
    )
}

export default WentsPage;


./app/(pages)/wents/Went.tsx:
import React, { JSX } from "react";
import Image from "next/image";
import { Button, Notice, DropDown } from "@/app/components";
import { ArrowLeft, GreenDanger } from "@/public/icons";
import ParkRow from "@/public/imgs/wents/parkRow.svg";

export const Went = (): JSX.Element => {
  return (
    <div className="flex flex-col gap-8">
        <div className="flex gap-1 flex-row-reverse items-center text-[#1A604E] font-black">
            <Image src={ArrowLeft} alt="^"/>
            <Image src={ParkRow} alt="❤️"/>
            <span>توان بخشی</span>
        </div>
        <div className="flex gap-3 justify-end">
            <Notice className="w-full" variant="secondary" value="شما در حال حاضر نیاز به ویزیت توسط متخصص توانبخشی دارید، لطفا زمان ویزیت توانبخشی خود را انتخاب و ثبت کنید." />
            <Image src={GreenDanger} alt="!"/>
        </div>
        <div className="flex gap-4 justify-end content-around">
            <div className="flex flex-col gap-3">
                <span className="text-[#1A604E] text-end text-lg">نحوه ویزیت</span>
                <DropDown placeholder="انتخاب کنید" options={[]} className="border-r-2 pr-4"  />
            </div>
            <div className="flex flex-col gap-3">
                <span className="text-[#1A604E] text-end text-lg">تاریخ</span>
                <DropDown placeholder="تاریخ وارد کنید" options={[]} className="border-r-2 pr-4" />
            </div>
            <div className="flex flex-col gap-3">
                <span className="text-[#1A604E] text-end text-lg">ساعت</span>
                <DropDown placeholder="انتخاب کنید" options={[]} />
            </div>
        </div>
        <Button text={"ثبت زمان ویزیت"} variant="secondary" className="w-fit"/>
    </div>
  );
};


./app/(pages)/wents/layout.tsx:
import { Header, NavBar, Tabs } from "@/app/components";
import { ReactNode } from "react";

interface Prop {
  haveTabs?: boolean;
  children: ReactNode
}

const Layout = ({children}:Prop) => {
  return (
    <>
      <div className="flex justify-between">
        <div className="flex w-full flex-col items-center gap-6">
          <Header
            userName={"joe rp"}
            userId={20938457}
            className="px-10 py-5"
          />
          <Tabs varient={"ligth"} />
          <div className="flex flex-col justify-center w-[95%] mx-8 rounded-[2.1875rem] p-8 border border-[#00000010] bg-white shadow-[8px_-23px_81.4px_#FFF,_-8px_23px_81.4px_rgba(26,_96,_78,_0.10)]">
            {children}
          </div>
        </div>

        <NavBar className="shadow-left fixed top-0 right-0 z-50 bg-white pt-3" />
      </div>
    </>
  );
};

export default Layout;


./app/(pages)/myplan/Modal.tsx:
import React, { ReactNode } from "react";
import {
  Card,
  Notice,
  StarRating,
  Timeline,
  TickRing,
  Button,
} from "@/app/components";
import ReactDOM from "react-dom";

interface Prop {
  onClose: () => void;
  children?: ReactNode;
}

const Modal = ({ onClose, children }: Prop) => {
  const modalContent = (
    <div className="modal-overlay">
      <Card
        title={"کاردرمانی"}
        description={"ویزیت انجام شده"}
        closeHandler={onClose}
        variant="secondary"
      >
        <div className="flex gap-3 flex-row-reverse w-[90%] justify-evenly">
          <div className="flex flex-col gap-0">
            <span className="text-black text-end text-lg">متخصص</span>
            <Notice variant="primary" value="دکتر اسدالله نوری" />
          </div>
          <div className="flex flex-col gap-0">
            <span className="text-black text-end text-lg">تاریخ</span>
            <Notice value="1403/11/05" />
          </div>
          <div className="flex flex-col gap-0">
            <span className="text-black text-end text-lg">ساعت</span>
            <Notice value="19:05" />
          </div>
        </div>
        <div className="flex flex-col gap-0 w-[95%]">
          <span className="text-black text-end text-lg">آدرس</span>
          <Notice value="وکیل آباد 53، کوچه دوم، پلاک 14" className="w-full" />
        </div>
        <div className="flex gap-2 flex-row-reverse justify-around">
          <Notice value="میزان رضایت از ویزیت" variant="secondary" />
          <Notice value={<StarRating value={0} />} variant="secondary" />
        </div>
        <div className="flex flex-row-reverse gap-4">
          <Timeline
            items={[
              {
                title: "ویزیت توسط متخصص توانبخشی",
                date: "شنبه 8 دی ماه - دکتر روحانی",
                iconSrc: TickRing,
              },
              {
                title: "جلسه تمرین گفتاردرمانی",
                date: "سه شنبه 11 دی ماه - دکتر عطایی",
                iconSrc: TickRing,
              },
              {
                title: "جلسه تمرین کاردرمانی",
                date: "پنج شنبه 13 دی ماه - دکتر نوری",
                iconSrc: TickRing,
              },
            ]}
          />
          <div className="flex flex-col gap-2">
            <span className="text-[#1A604E] text-end">نظر شما در مورد این ویزیت</span>
            <textarea
              className={`
          w-auto h-[8rem] rounded-[5px] border-[2px] border-solid text-lg 
          focus:outline-none focus:ring-2 focus:border-transparent
          border-[#1A604E]
          text-[#1A604E]
          shadow-[inset_-1px_1px_4px_#00000040,_-1px_1px_4px_#ffffff]
          placeholder:text-[#1A604EBA]
        focus:ring-[#1A604E]
        `}
            ></textarea>
            <Button text={"ثبت"} className="w-min" />
          </div>
        </div>
      </Card>
    </div>
  );

  return ReactDOM.createPortal(modalContent, document.body);
};

export default Modal;


./app/(pages)/myplan/Chip.tsx:
import PropTypes from "prop-types";
import { JSX } from "react";
import Image from "next/image";

interface Props {
  text: string;
  icon: string;
  varient?: 'primary' | 'secondary' | 'danger';
}

export const Chip = ({
  varient = 'primary',
  text,
  icon,
}: Props): JSX.Element => {
  // Determine background and text colors based on variant
  const variantStyles = {
    primary: {
      bg: 'bg-[#1a604e]',
      text: 'text-white',
    },
    secondary: {
      bg: 'bg-[#B9D0AA]',
      text: 'text-[#1a604e]',
    },
    danger: {
      bg: 'bg-[#D85562]',
      text: 'text-white',
    },
  };

  return (
    <div
      className={`flex w-[138px] items-center justify-end pl-1 pr-[5px] py-0 rounded-[5px] whitespace-nowrap ${variantStyles[varient].bg}`}
    >
      <div className="inline-flex items-center justify-center gap-2.5 pl-2.5 pr-0.5 py-2">
        <div
          className={`relative w-fit mt-[-1.00px] font-medium ${variantStyles[varient].text} text-base text-left`}
        >
          {text}
        </div>
      </div>
      <Image className="!relative !w-[25px] !h-[25px]" src={icon} alt="chip icon" />
    </div>
  );
};

Chip.propTypes = { text: PropTypes.string };

./app/(pages)/myplan/page.tsx:
"use client";
import FullCalendar from "@fullcalendar/react";
import faLocale from "@fullcalendar/core/locales/fa";
import dayGridPlugin from "@fullcalendar/daygrid";
import listPlugin from "@fullcalendar/list";
import multiMonthPlugin from "@fullcalendar/multimonth";
import persian from "react-date-object/calendars/persian";
import gregorian_fa from "react-date-object/locales/gregorian_fa";

import Calender from "react-multi-date-picker";

import { Helpers } from "./Helpers";
import { Experimental } from "./Experimental";
import Modal from "./Modal";
import { useState } from "react";

const MyPlan = () => {
  const [showModal, setShowModal] = useState(false);
  return (
    <>
      {showModal && (
        <Modal onClose={() => setShowModal(false)}>Hello from the modal!</Modal>
      )}
      <div className="grid grid-cols-5 gap-4">
        <div className="col-span-1 p-4 rounded-[0.8rem] text-[#1A604E]">
          <Experimental />
        </div>
        <div className="col-span-4 p-4 rounded-[0.8rem] text-black">
          <div className="grid grid-cols-10 gap-1">
            <div className="col-span-7" onClick={() => setShowModal(true)}>
              <FullCalendar
                plugins={[dayGridPlugin, listPlugin, multiMonthPlugin]}
                initialView="dayGridMonth"
                locale={faLocale}
                headerToolbar={{
                  end: "dayGridMonth,dayGridWeek,dayGridDay,list,multiMonthYear",
                  start: "prev,next",
                  center: "title",
                }}
              />
            </div>
            <div className="col-span-3 h-full">
              <div className="grid grid-rows-[10%_40%_50%] gap-0 h-full relative">
                <div className="p-4">
                  <button
                    style={{ backgroundColor: "#1A604E", color: "white" }}
                    className="w-full p-1 rounded flex items-center justify-center gap-1"
                  >
                    <span className="text-bold">افزودن رویداد</span>
                    <svg
                      width="24"
                      height="25"
                      viewBox="0 0 24 25"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M12.03 5.5L12.0117 19.5"
                        stroke="white"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                      <path
                        d="M5 12.5H19"
                        stroke="white"
                        strokeWidth="2"
                        strokeLinecap="round"
                        strokeLinejoin="round"
                      />
                    </svg>
                  </button>
                </div>
                <div className="border-t-2 border-gray-300 w-full absolute top-[10%]"></div>
                <div className="p-4">
                  <Calender
                    locale={gregorian_fa}
                    calendar={persian}
                    type="Calender"
                  />
                </div>
                <div className="border-t-2 border-gray-300 w-full absolute top-[50%]"></div>
                <div className="p-4 flex align-start flex-col gap-6">
                  <span style={{ color: "gray", alignSelf: "end" }}>فیلتر</span>
                  <div className="flex flex-col gap-3">
                    <div className="flex gap-2" style={{ alignSelf: "end" }}>
                      <p>تخصص</p>
                      <svg
                        width="24"
                        height="25"
                        viewBox="0 0 24 25"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M12.03 5.5L12.0117 19.5"
                          stroke="black"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        />
                        <path
                          d="M5 12.5H19"
                          stroke="black"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        />
                      </svg>
                    </div>
                    <div className="flex gap-2" style={{ alignSelf: "end" }}>
                      <p>وضعیت مراجعه</p>
                      <svg
                        width="24"
                        height="25"
                        viewBox="0 0 24 25"
                        fill="none"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M12.03 5.5L12.0117 19.5"
                          stroke="black"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        />
                        <path
                          d="M5 12.5H19"
                          stroke="black"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                        />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <Helpers />
    </>
  );
};

export default MyPlan;


./app/(pages)/myplan/Experimental.tsx:
import { Chip } from "./Chip";
import Image from "next/image";
import BloodIcon from '@/public/imgs/myplan/blood.svg';
import ExperimentalIcon from '@/public/imgs/myplan/experimental.svg';
import { JSX } from "react";

export const Experimental = (): JSX.Element => {
  return (
    <div className="flex flex-col items-end gap-7 p-5 bg-[#eaeef1] rounded-[15px] overflow-scroll h-[100%]">
      <div className="flex items-center gap-[5px]">
        <p className="text-2xl">آزمایشات</p>
        <Image className="!relative !w-[42px] !h-[42px]" src={ExperimentalIcon} alt="آزمایشی" />
      </div>
      <div className="flex flex-col items-end gap-3 w-full">
        <Chip
          icon={BloodIcon}
          text="MRI"
        />
        <Chip
          icon={BloodIcon}
          text="MRI"
          varient="secondary"
        />
      </div>
    </div>
  );
};


./app/(pages)/myplan/Helpers.tsx:
import { JSX } from "react";

export const Helpers = (): JSX.Element => {
  return (
    <div className="inline-flex items-center gap-[27px] relative mt-16" style={{justifyContent:'end'}}>
      <div className="gap-[7px] inline-flex items-center relative ">
        <div className="justify-center gap-2.5 p-2.5 inline-flex items-center relative ">
          <div className="relative w-fit mt-[-1.00px] font-medium text-black text-base text-left ">
            رزرو شده
          </div>
        </div>
        <div className="relative w-[37px] h-[37px] bg-[#1a604e] rounded-[18.5px]" />
      </div>
      <div className="gap-[7px] inline-flex items-center relative ">
        <div className="justify-center gap-2.5 p-2.5 inline-flex items-center relative ">
          <div className="relative w-fit mt-[-1.00px] font-medium text-black text-base text-left ">
            مراجعه نشده
          </div>
        </div>
        <div className="bg-[#d85562] relative w-[37px] h-[37px] rounded-[18.5px]" />
      </div>
      <div className="gap-[7px] inline-flex items-center relative ">
        <div className="justify-center gap-2.5 p-2.5 inline-flex items-center relative ">
          <div className="relative w-fit mt-[-1.00px] font-medium text-black text-base text-left ">
            مراجعه شده
          </div>
        </div>
        <div className="bg-[#b9d0aa] relative w-[37px] h-[37px] rounded-[18.5px]" />
      </div>
    </div>
  );
};


./app/(pages)/myplan/layout.tsx:
import { Header, NavBar, Tabs } from "@/app/components";
import { ReactNode } from "react";

interface Prop {
  haveTabs?: boolean;
  children: ReactNode
}

const Layout = ({children}:Prop) => {
  return (
    <>
      <div className="flex justify-between">
        <div className="flex w-full flex-col items-center gap-6">
          <Header
            userName={"joe rp"}
            userId={20938457}
            className="px-10 py-5"
          />
          <Tabs varient={"ligth"} />
          <div className="flex flex-col justify-center w-[95%] mx-8 rounded-[2.1875rem] p-8 border border-[#00000010] bg-white shadow-[8px_-23px_81.4px_#FFF,_-8px_23px_81.4px_rgba(26,_96,_78,_0.10)]">
            {children}
          </div>
        </div>

        <NavBar className="shadow-left fixed top-0 right-0 z-50 bg-white pt-3" />
      </div>
    </>
  );
};

export default Layout;


./app/(pages)/auth/register/page.tsx:
import { Input, Button } from "@/app/components";
import Logo from "@/public/imgs/logo.png";
import Link from "next/link";
import { JSX } from "react";
import Image from "next/image";

const RegisterAuthPage = (): JSX.Element => {
  return (
    <div className="flex min-h-screen flex-row-reverse bg-gray-100">
      {/* Form Section */}
      <div className="relative flex w-1/2 items-center justify-center bg-white p-20">
        {/* Form Content */}
        <div className="mx-auto mt-24 flex max-w-md flex-col items-center">
          <h1
            className="mb-8 text-right text-4xl text-[#1a604e]"
            style={{ fontWeight: 300, width: "max-content" }}
          >
            ثبت نام در خانه پارکینسون
          </h1>

          <div className="flex flex-col items-center">
            <Input
              title="نام کاربری"
              placeholder="نام کاربری خود را وارد کنید"
              variant="primary"
              centerize={false}
            />

            <Input
              title="رمز عبور"
              placeholder="رمز عبور خود را وارد کنید"
              variant="primary"
              centerize={false}
            />

            <Input
              title="شماره تماس"
              placeholder="شماره تماس خود را وارد کنید"
              variant="primary"
              centerize={false}
            />

            <Button
              text="ثبت نام"
              variant="secondary"
              className="text-xl mt-6"
              style={{
                boxShadow: "-6px 7px 21px -6px #1A604E",
              }}
            />
          </div>
        </div>
      </div>

      {/* Graphic Section */}
      <div
        className="flex w-1/2 items-center justify-center bg-cover bg-center"
        style={{ backgroundImage: `url(/imgs/fade-login.png)` }}
      >
        <Link href='/'>
            <Image src={Logo} alt="Logo" className="absolute top-6 right-6 w-28" />
        </Link>
        <div className="max-w-md text-center text-white">
          <h2 className="mb-8 text-5xl font-bold">خوش اومدی!</h2>
          <p className="text-2xl leading-relaxed">
            اگر قبلا حساب کاربری ساختی میتونی وارد حساب شخصیت بشی!
          </p>

          <Link href="/auth/login">
            <Button
              text="ورود به حساب کاربری"
              variant="primary"
              className="mx-auto mt-12 text-lg"
              style={{
                boxShadow: "-6px 7px 21px -6px #1A604E",
                borderRadius: "0.9375rem",
              }}
            />
          </Link>
        </div>
      </div>
    </div>
  );
};

export default RegisterAuthPage;


./app/(pages)/auth/login/page.tsx:
import { Input, Button } from "@/app/components";
import Logo from "@/public/imgs/logo-layer.png";
import { JSX } from "react";
import Link from "next/link";
import Image from "next/image";

const LoginAuthPage = (): JSX.Element => {
  return (
    <div className="flex min-h-screen bg-gray-100">
      {/* Form Section */}
      <div className="relative flex w-1/2 items-center justify-center bg-white p-20">
        {/* Form Content */}
        <div className="mx-auto mt-24 flex max-w-md flex-col items-center">
          <h1
            className="mb-16 text-right text-6xl text-[#1a604e]"
            style={{ fontWeight: 600, width: "max-content" }}
          >
            ورود به حساب کاربری
          </h1>

          <div className="flex flex-col items-center">
            <Input
              title="نام کاربری"
              placeholder="نام کاربری خود را وارد کنید"
              variant="primary"
              centerize={false}
            />

            <Input
              title="رمز عبور"
              placeholder="رمز عبور خود را وارد کنید"
              variant="primary"
              centerize={false}
            />

            <Button
              text="ورود"
              variant="secondary"
              className="text-xl w-40 mt-6"
              style={{
                boxShadow: "-6px 7px 21px -6px #1A604E",
                borderRadius: "0.9375rem",
              }}
            />
          </div>
        </div>
      </div>

      {/* Graphic Section */}
      <div
        className="flex w-1/2 items-center justify-center bg-cover bg-center"
        style={{ backgroundImage: `url(/imgs/fade-login.png)` }}
      >
        <Link href='/'>
            <Image src={Logo} alt="Logo" className="absolute top-8 right-8 w-32" />
        </Link>
        <div className="max-w-md text-center text-white">
          <h2 className="mb-8 text-5xl font-bold">سلام دوست من!</h2>
          <p className="text-2xl leading-relaxed">
            اگر تو هم دوست داری به خانه پارکینسون ملحق شی میتونی حساب خودتو
            ایجاد کنی!
          </p>

          <Link href="/auth/register">
            <Button
              text="ثبت نام"
              variant="primary"
              className="mx-auto mt-12 w-48 text-lg"
              style={{
                boxShadow: "-6px 7px 21px -6px #1A604E",
                borderRadius: "0.9375rem",
              }}
            />
          </Link>
        </div>
      </div>
    </div>
  );
};

export default LoginAuthPage;


./app/(pages)/dashboard/Activities.tsx:
import { Button } from "@/app/components";
import { ArrowDown, Clock } from "@/public/icons";
import { JSX } from "react";
import Image from "next/image";

export const Activities = (): JSX.Element => { 
  return ( 
    <div className="flex items-center justify-between pt-[15px] pb-5 px-0 relative border-b border-solid border-[#00000030] gap-10">
      <div className="relative w-[640px] h-[585px] bg-[#1a604e] rounded-[35px] overflow-hidden">
        <div className="relative h-full rounded-[35px]">
          <div className={`absolute inset-0 bg-[url(/imgs/dashboard/parkinsons.png)] bg-cover bg-center rounded-[35px]`} />
          <div className="absolute inset-0 rounded-[35px] bg-gradient-to-b from-[#1a604e] via-[#1a604ee6] to-transparent" />
          <div className="flex flex-col items-start gap-3 absolute top-[23px] left-[26px] right-[26px]">
            <p className="w-full font-semibold text-white text-[50px] text-right leading-normal">
              کارگاه های <br /> حضوری و آنلاین <br /> 
              <span className="font-black font-pelak">زندگی با پارکینسون</span>
            </p>
            <Button text="اطلاعات بیشتر" variant="secondary" />
          </div>
        </div>
      </div>
      
      <div className="flex flex-col items-start gap-5 flex-1 max-w-[677px]">
        <div className="flex items-center justify-between w-full">
          <div className="flex items-center gap-2">
            <Image className="w-6 h-6" src={ArrowDown} alt="arrow icon" style={{transform:'rotate(90deg)'}} />
            <div className="font-pelak text-[#1a604e] text-base text-right">
              شرح فعالیت ها
            </div>
          </div>
          <div className="font-medium text-black text-2xl text-right">
            فعالیت های پیش رو
          </div>
        </div>

        {/* Activities List */}
        <div className="w-full space-y-4">
          {[
            { title: "ویزیت توسط متخصص توانبخشی", date: "شنبه 8 دی ماه - دکتر روحانی" },
            { title: "جلسه تمرین گفتاردرمانی", date: "سه شنبه 11 دی ماه - دکتر عطایی" },
            { title: "جلسه تمرین کاردرمانی", date: "پنج شنبه 13 دی ماه - دکتر نوری" },
            { title: "جلسه تمرین آب درمانی", date: "پنج شنبه 13 دی ماه - دکتر نوری" },
            { title: "جلسه تمرین فیزیوتراپی", date: "پنج شنبه 13 دی ماه - دکتر نوری" },
          ].map((activity, index) => (
            <div key={index} className={`p-4 rounded-[15px] ${index % 2 === 0 ? 'bg-[#b9d0aa24]' : ''}`}>
              <div className="flex items-center justify-end gap-2">
                <span className="font-pelak text-black text-2xl text-right">
                  {activity.title}
                </span>
                <Image className="w-6 h-6" src={Clock} alt="clock icon" />
              </div>
              <p className="text-right text-base text-black mt-2">
                {activity.date}
              </p>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

./app/(pages)/dashboard/page.tsx:
import { Together } from './Together';
import { ArrowLeft } from '@/public/icons';
import { DatePicker } from '../../components';
import { Activities } from './Activities';
import { NotDoIt } from './NotDoIt';
import Image from 'next/image';

const DashBoardPage = () => {
  return (
    <>
    <div style={{
          display: 'flex',
          alignItems: 'center',
          borderBottom: '1px solid rgba(0, 0, 0, 0.19)',
        }}>
        <Image src='/imgs/dashboard/omid.png' width={720} height={464} alt='omid dashte bash'/>
        <Together />
    </div>
    <div className="border-[#00000030] py-[0.88rem] flex  border-b border-solid items-start gap-10 ">
      <div className="mb-[0.25rem] flex flex-col gap-[1.75rem] w-1/2">
        <div className="flex justify-end px-[1.75rem] py-[0.63rem] sm:px-[1.00rem]">
          <p className='lg:text-[1.25rem] text-[1.50rem] !text-[#000000] font-medium'>
            مشاور متخصص من
          </p>
        </div>
        <div className="rounded-[34px] bg-[#eaeef1] p-5 shadow-lg">
        <div className="flex flex-col items-center gap-8 rounded-[14px] border border-solid border-[#1a604e] bg-[#eaeef1] p-6 sm:p-4">
          <div className="mt-7 flex w-[44%] flex-col items-center justify-center gap-3.5 lg:w-full md:w-full">
            <Image src='/imgs/dashboard/doctor.png' width={240} height={240} alt="doctor" />
            <h3 className="!text-[#000000] lg:text-[2.06rem] truncate">
              دکتر زهره حمیدی
            </h3>
          </div>
          <h4 className="self-stretch text-center text-[1.25rem] font-medium leading-[1.81rem] !text-[#000000] lg:text-[1.06rem]">
            لورم ایپسوم متن ساختگی با تولید سادگی نامفهوم از صنعت چاپ، و با استفاده از طراحان گرافیک است، چاپگرها و متون بلکه روزنامه و مجله در ستون و سطرآنچنان که لازم است، و برای شرایط فعلی تکنولوژی مورد نیاز، و کاربردهای متنوع با هدف بهبود ابزارهای کاربردی می باشد،
          </h4>
        </div>
      </div>

      </div>
      <div className="gap-[1.75rem] flex flex-col w-1/2">
        <div className="p-[0.38rem] flex items-center justify-center md:flex-col">
          <div className="flex flex-1 items-center justify-center md:self-stretch">
            <Image alt='<' src={ArrowLeft} style={{transform:'rotate(90deg)'}} />
            <div className="py-[0.38rem] flex flex-1">
              <p className=" lg:text-[0.81rem] text-[1.00rem] !text-[#1a604e] font-normal">شرح فعالیت ها</p>
            </div>
          <p className=" lg:text-[1.25rem] text-[1.50rem] !text-[#000000] font-medium">فعالیت های پیش رو</p>
         </div>
      </div>
      <div className="rounded-[34px] shadow-[-8px_23px_81px_0_#1a604e19] bg-[#ffffff] mx-[1.75rem] py-[0.88rem] px-[1.25rem] h-[36rem] relative content-center lg:h-auto md:mx-0 md:h-auto">
        <DatePicker/>
      </div>
   </div>
    </div>

    <Activities/>
    <NotDoIt/>
    </>
  );
};

export default DashBoardPage;


./app/(pages)/dashboard/Together.tsx:
import Image from "next/image";

interface Prop {
    className?: string
}

export const Together = ({className}:Prop) => {
  return (
    <div className={`rtl relative w-[36.5rem] h-[21.1rem] text-[#1a604e] bg-[#b9d0aa] rounded-[35px] overflow-hidden ${className}`}>
        <Image alt="together" src='/imgs/dashboard/together.svg' width={250} height={250}/>

            <div className="absolute right-8 top-[38%]">
              امروز
            </div>

              <div className="absolute right-[37%] top-[73%]">
                امین
              </div>

              <div className="absolute right-[5%] top-[52%] text-9xl">
                ۴۸
              </div>

            <div className="absolute w-fit bottom-[4%] right-[6%] ">
              !روزیه که کنارمون هستید
            </div>
      
    </div>
  );
};

./app/(pages)/dashboard/NotDoIt.tsx:
import { Button } from '@/app/components';
import { Danger, ArrowDown } from "@/public/icons";
import { JSX } from 'react';
import Image from 'next/image';

export const NotDoIt = (): JSX.Element => (
    <div className="flex items-center justify-between pt-[15px] pb-5 px-0 relative border-b border-solid border-[#00000030] gap-10">
        {/* Left Activities Panel */}
        <div className="flex flex-col items-start gap-5 flex-1 max-w-[677px]">
            <div className="flex items-center justify-between w-full">
                <div className="flex items-center gap-2">
                <Image className="w-6 h-6" src={ArrowDown} alt="arrow icon" style={{transform:'rotate(90deg)'}} />
            <div className="font-pelak text-[#1a604e] text-base text-right">
              شرح فعالیت ها
            </div>
                </div>
                <div className="font-medium text-black text-2xl text-right">
                    فعالیت های انجام نشده
                </div>
            </div>

            {/* Activities List */}
            <div className="w-full space-y-4">
                {[
            { title: "ویزیت توسط متخصص توانبخشی", date: "شنبه 8 دی ماه - دکتر روحانی", icon: <Image alt='دکتر روحانی' src={Danger}/>, bgColor: 'bg-[#d855621a]', },
            { title: "جلسه تمرین گفتاردرمانی", date: "سه شنبه 11 دی ماه - دکتر عطایی", icon: <Image alt='دکتر عطایی' src={Danger}/>, bgColor: 'bg-[#d855621a]', },
            { title: "جلسه تمرین کاردرمانی", date: "پنج شنبه 13 دی ماه - دکتر نوری", icon: <Image alt='دکتر نوری' src={Danger}/>, bgColor: 'bg-[#d855621a]', },
            { title: "جلسه تمرین آب درمانی", date: "پنج شنبه 13 دی ماه - دکتر نوری", icon: <Image alt='دکتر نوری' src={Danger}/>, bgColor: 'bg-[#d855621a]', },
            { title: "جلسه تمرین فیزیوتراپی", date: "پنج شنبه 13 دی ماه - دکتر نوری", icon: <Image alt='دکتر نوری' src={Danger}/>, bgColor: 'bg-[#d855621a]', },
          ].map((activity, index) => (
                    <div key={index} className={`p-4 rounded-[15px] ${activity.bgColor}`}>
                        <div className="flex items-center justify-end gap-2">
                            <span className="font-pelak text-black text-2xl text-right">
                                {activity.title}
                            </span>
                            {activity.icon}
                        </div>
                        <p className="text-right text-base text-black mt-2">
                            {activity.date}
                        </p>
                    </div>
                ))}
            </div>
        </div>

        {/* Right Image Panel */}
        <div className="relative w-[677px] h-[585px] bg-[#b9d0aa] rounded-[35px] overflow-hidden">
            <div
                className="relative h-full bg-cover bg-center"
                style={{
                    backgroundImage: `url(/imgs/dashboard/park-family.png)`,
                    backgroundPosition: 'center 35%'
                }}
            >
                {/* Adjusted gradient - starts higher */}
                <div className="absolute inset-0 bg-gradient-to-b from-transparent via-[#b9d0aa] to-[#b9d0aa] via-60%" />

                <div className="flex flex-col items-end absolute bottom-[120px] left-[31px] right-[31px]">
                    <div className="flex items-end gap-8">
                        <Button
                            text="اطلاعات بیشتر" />
                        <p className="font-semibold text-[#1a604e] text-[50px] text-right leading-normal">
                            رویداد ها <br />
                            و همایش های <br />
                            <span className="font-black font-pelak">خانواده پارکینسون</span>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
);

./app/(pages)/dashboard/layout.tsx:
import { Header, NavBar, Tabs } from "@/app/components";
import { ReactNode } from "react";

interface Prop {
  haveTabs?: boolean;
  children: ReactNode
}

const Layout = ({children, haveTabs = false}:Prop) => {
  return (
    <>
      <div className="flex justify-between">
        <div className="flex w-full flex-col items-center gap-6">
          <Header
            userName={"joe rp"}
            userId={20938457}
            className="px-10 py-5"
          />
          {haveTabs && (<Tabs varient={"ligth"} />)}
          <div className="flex flex-col justify-center w-[95%] mx-8 rounded-[2.1875rem] p-8 border border-[#00000010] bg-white shadow-[8px_-23px_81.4px_#FFF,_-8px_23px_81.4px_rgba(26,_96,_78,_0.10)]">
            {children}
          </div>
        </div>

        <NavBar className="shadow-left fixed top-0 right-0 z-50 bg-white pt-3" />
      </div>
    </>
  );
};

export default Layout;


./app/(pages)/FAQ/page.tsx:
import { Help, HaveQuestion } from "@/public/icons";
import { FAQ, Button } from "@/app/components";
import Image from "next/image";

const FAQPage = () => {
  return (
    <div className="flex flex-col gap-8">
      <div className="flex gap-4 flex-col">
        <div
          className="flex gap-4 text-[#1A604E] font-black items-center"
          style={{ justifyContent: "end" }}
        >
          <span>سوالات شما</span>
          <Image src={Help} alt="?" />
        </div>
        {Array.from({ length: 6 }, (_, i) => (
          <FAQ
            key={i}
            title={
              "چگونه از لباس‌های هوشمند یا حسگرهای پوشیدنی* برای بهبود تعادل و پیشگیری از زمین خوردن استفاده کنم؟"
            }
            description={
              "چگونه از لباس‌های هوشمند یا حسگرهای پوشیدنی* برای بهبود تعادل و پیشگیری از زمین خوردن استفاده کنم چگونه از لباس‌های هوشمند یا حسگرهای پوشیدنی* برای بهبود تعادل و پیشگیری از زمین خوردن استفاده کنم چگونه از لباس‌های هوشمند یا حسگرهای پوشیدنی* برای بهبود تعادل و پیشگیری از زمین خوردن استفاده کنم"
            }
          />
        ))}
      </div>
      <div
        className="flex gap-4 text-[#1A604E] font-black items-center"
        style={{ justifyContent: "end" }}
      >
        <span>سوال دیگری در این زمینه دارید؟</span>
        <Image src={HaveQuestion} alt="?" />
      </div>
      <textarea
        className={`
          w-auto h-[8rem] rounded-[5px] border-[2px] border-solid text-lg 
          focus:outline-none focus:ring-2 focus:border-transparent
          border-[#1A604E]
          text-[#1A604E]
          shadow-[inset_-1px_1px_4px_#00000040,_-1px_1px_4px_#ffffff]
          placeholder:text-[#1A604EBA]
        focus:ring-[#1A604E]
        `}
      ></textarea>
      <Button text={"ارسال پرسش"} variant="secondary" className="w-min"/>
    </div>
  );
};

export default FAQPage;


./app/(pages)/FAQ/layout.tsx:
import { Header, NavBar, Tabs } from "@/app/components";
import { ReactNode } from "react";

interface Prop {
  haveTabs?: boolean;
  children: ReactNode
}

const Layout = ({children}:Prop) => {
  return (
    <>
      <div className="flex justify-between">
        <div className="flex w-full flex-col items-center gap-6">
          <Header
            userName={"joe rp"}
            userId={20938457}
            className="px-10 py-5"
          />
          <Tabs varient={"ligth"} />
          <div className="flex flex-col justify-center w-[95%] mx-8 rounded-[2.1875rem] p-8 border border-[#00000010] bg-white shadow-[8px_-23px_81.4px_#FFF,_-8px_23px_81.4px_rgba(26,_96,_78,_0.10)]">
            {children}
          </div>
        </div>

        <NavBar className="shadow-left fixed top-0 right-0 z-50 bg-white pt-3" />
      </div>
    </>
  );
};

export default Layout;


./app/components/FilePicker.stories.tsx:
import { FilePicker } from './FilePicker';

export default {
  component: FilePicker,
  title: 'Base/File Picker',
  tags: ['autodocs'],
};

export const Sample = {
  args: {
    title: 'سونوگرافی',
    buttonName: 'آپلود فایل'
  },
};




./app/components/Header.tsx:
import { Help, MessageEmoji, SettingTwo, Remind } from "@/public/icons";
import { DarkLightToggle } from "./ui/DarkLigthToggle/DarkLigthToggle";
import Amo from "@/public/imgs/amo.jpeg";
import Image from "next/image";
import Link from "next/link";
import { JSX } from "react";

interface Props {
  userName: string;
  userId: number;
  className?: string;
}

export const Header = ({ userName, userId, className }: Props): JSX.Element => {
  return (
    <header
      className={`relative mx-auto h-20 w-full max-w-screen-2xl bg-[#eaeef1] shadow-lg ${className}`}
    >
      <div className="flex h-full items-center justify-between px-4 md:px-8">
        {/* Left Side Icons */}
        <div className="flex items-center gap-4 md:gap-6">
          <Link href="/myplan">
            <Image
              className="h-8 w-8 transition-opacity hover:opacity-80 md:h-9 md:w-9"
              alt="Settings"
              src={SettingTwo}
            />
          </Link>
          <Link href="/FAQ">
            <Image
              className="h-8 w-8 transition-opacity hover:opacity-80 md:h-9 md:w-9"
              alt="Help"
              src={Help}
            />
          </Link>
          <Link href='/wents'>
            <Image
              className="h-8 w-8 transition-opacity hover:opacity-80 md:h-9 md:w-9"
              alt="Messages"
              src={MessageEmoji}
            />
          </Link>
          <DarkLightToggle activate className={""} />
        </div>

        {/* Right Side Profile */}
        <div className="ml-auto flex items-center gap-4 md:gap-6">
          <Link href="/dashboard">
            <div className="flex items-center gap-3 md:gap-4">
              <div className="flex flex-col items-end text-right">
                <span className="[font-family:'Pelak-Regular',Helvetica] text-sm font-medium text-gray-800 md:text-base">
                  {userName}
                </span>
                <span className="[font-family:'PelakFA-Regular',Helvetica] text-xs text-gray-600 md:text-sm">
                  {userId}
                </span>
              </div>
              <Image
                className="h-10 w-10 rounded-full border-2 border-white object-cover md:h-12 md:w-12"
                alt="Profile"
                src={Amo}
              />
              <Image
                className="h-8 w-8 transition-opacity hover:opacity-80 md:h-9 md:w-9"
                alt="Notifications"
                src={Remind}
              />
            </div>
          </Link>
        </div>
      </div>
    </header>
  );
};


./app/components/DatePicker.tsx:
"use client"
import React, { useState } from 'react';

export const DatePicker = () => {
  const [selectedDay, setSelectedDay] = useState(null);
  const [currentDate, setCurrentDate] = useState(new Date());
  
  // Persian month names and their day counts (approximate)
  const persianMonths = [
    { name: 'فروردین', days: 31 },
    { name: 'اردیبهشت', days: 31 },
    { name: 'خرداد', days: 31 },
    { name: 'تیر', days: 31 },
    { name: 'مرداد', days: 31 },
    { name: 'شهریور', days: 31 },
    { name: 'مهر', days: 30 },
    { name: 'آبان', days: 30 },
    { name: 'آذر', days: 30 },
    { name: 'دی', days: 30 },
    { name: 'بهمن', days: 30 },
    { name: 'اسفند', days: 29 }
  ];

  // Get current Persian date
  const getPersianDate = (date) => ({
    year: date.getFullYear(),
    month: date.getMonth() + 1,
    day: date.getDate()
  });

  // Generate proper calendar days
  const generateCalendar = () => {
    const days = [];
    const { year, month } = getPersianDate(currentDate);
    const monthIndex = month - 1;
    
    // Get number of days in current month
    const daysInMonth = persianMonths[monthIndex].days;
    
    // Create proper day objects
    for (let i = 1; i <= daysInMonth; i++) {
      days.push({
        number: i,
        isCurrentMonth: true,
        isWeekend: i % 7 === 0 
      });
    }

    // Fill remaining grid cells (42 total)
    while (days.length < 42) {
      days.push({
        number: days.length - daysInMonth + 1,
        isCurrentMonth: false,
        isWeekend: false
      });
    }

    return days;
  };

  // Handle month/year change with boundary checks
  const handleDateChange = (type, value) => {
    const newDate = new Date(currentDate);
    
    if (type === 'year') {
      newDate.setFullYear(value);
    } else if (type === 'month') {
      if (value < 1) {
        newDate.setFullYear(newDate.getFullYear() - 1);
        newDate.setMonth(11);
      } else if (value > 12) {
        newDate.setFullYear(newDate.getFullYear() + 1);
        newDate.setMonth(0);
      } else {
        newDate.setMonth(value - 1);
      }
    }
    
    setCurrentDate(newDate);
  };

  // Handle today button
  const handleToday = () => {
    const today = new Date();
    setCurrentDate(today);
    setSelectedDay(getPersianDate(today).day);
  };

  return (
    <div dir="rtl" className="w-full h-full flex flex-col bg-white rounded-lg shadow-lg p-4">
      {/* Year/Month Selector */}
      <div className="flex justify-between items-center mb-4">
        {/* Year Selector */}
        <div className="flex items-center gap-2 text-black">
          <button 
            onClick={() => handleDateChange('year', currentDate.getFullYear() - 1)}
            className="p-2 hover:bg-gray-100 rounded-lg transition-all border border-gray-300 shadow-sm hover:shadow-md px-3"
          >
            -
          </button>
          <select
            value={currentDate.getFullYear()}
            onChange={(e) => handleDateChange('year', parseInt(e.target.value))}
            className="bg-transparent py-2 px-4 rounded-lg border border-gray-200"
          >
            {Array.from({ length: 401 }, (_, i) => i + 1200).map(year => (
              <option key={year} value={year}>{year}</option>
            ))}
          </select>
          <button 
            onClick={() => handleDateChange('year', currentDate.getFullYear() + 1)}
            className="p-2 hover:bg-gray-100 rounded-lg transition-all border border-gray-300 shadow-sm hover:shadow-md px-3"
          >
            +
          </button>
        </div>

        {/* Month Selector */}
        <div className="flex items-center gap-2 text-black">
          <button 
            onClick={() => handleDateChange('month', currentDate.getMonth())}
            className="p-2 hover:bg-gray-100 rounded-lg transition-all border border-gray-300 shadow-sm hover:shadow-md px-3"
          >
            -
          </button>
          <select
            value={currentDate.getMonth() + 1}
            onChange={(e) => handleDateChange('month', parseInt(e.target.value))}
            className="bg-transparent py-2 px-4 rounded-lg border border-gray-200"
          >
            {persianMonths.map((month, index) => (
              <option key={index + 1} value={index + 1}>{month.name}</option>
            ))}
          </select>
          <button 
            onClick={() => handleDateChange('month', currentDate.getMonth() + 2)}
            className="p-2 hover:bg-gray-100 rounded-lg transition-all border border-gray-300 shadow-sm hover:shadow-md px-3"
          >
            +
          </button>
        </div>
      </div>

      {/* Days Grid */}
      <div className="grid grid-cols-7 gap-2 flex-1">
        {/* Week Days Header */}
        {['ش', 'ی', 'د', 'س', 'چ', 'پ', 'ج'].map((day, index) => (
          <div 
            key={day} 
            className={`text-center font-bold py-2 ${
              index === 6 ? 'text-red-500' : 'text-gray-700'
            } bg-gray-100 rounded-lg`}
          >
            {day}
          </div>
        ))}

        {/* Calendar Days */}
        {generateCalendar().map((day, index) => (
          <div
            key={index}
            onClick={() => day.isCurrentMonth && setSelectedDay(day.number)}
            className={`
              flex items-center justify-center h-12 cursor-pointer
              transition-all rounded-lg border border-transparent
              hover:bg-gray-100 hover:scale-110
              ${selectedDay === day.number && day.isCurrentMonth ? 'bg-green-700 text-white' : ''}
              ${day.isCurrentMonth ? 
                (day.isWeekend ? 'text-red-500' : 'text-gray-800') : 
                'text-gray-400 opacity-50'}
            `}
          >
            {day.number}
          </div>
        ))}
      </div>

      {/* Footer Buttons */}
      <div className="flex justify-between mt-4">
        <button
          onClick={handleToday}
          className="px-4 py-2 bg-green-700 text-white rounded-lg hover:bg-blue-600 transition-all shadow-md"
        >
          امروز
        </button>
        <button className="px-4 py-2 text-gray-700 hover:bg-gray-100 rounded-lg transition-all border border-gray-200">
          خالی
        </button>
      </div>
    </div>
  );
};

./app/components/NavBar.stories.tsx:
import {NavBar} from './NavBar';

export default {
  component: NavBar,
  title: 'Base/NavBar',
  tags: ['autodocs'],
};

export const Sample = {
  args: {
  },
};




./app/components/Header.stories.tsx:
import { Header } from './Header';

export default {
  component: Header,
  title: 'Base/Header',
  tags: ['autodocs'],
};

export const Sample = {
  args: {
    userName: 'احمد شریفی',
    userId: 2482390
  },
};




./app/components/Tabs.stories.tsx:
import { Tabs } from "./Tabs";

export default {
  component: Tabs,
  title: 'Base/Tabs',
  tags: ['autodocs']
}

export const Sample = {
  args: {
    varient:'default'
  },
};


./app/components/FrameList.stories.tsx:
import { FrameList } from "./FrameList";
export default {
  component: FrameList,
  title: 'Base/Frame List',
  tags: ["autodocs"],
};

export const Sample = {
  args: {
    title: 'قلبی',
    items: [
      { label: "تعداد", value: "Quantity" },
      { label: "دوز دارو", value: "Dose" },
      { label: "لوودوپا / کربی دوپا", value: "Levodopa / Carbidopa" },
      { label: "تعداد", value: "Quantity" },
      { label: "دوز دارو", value: "Dose" },
      { label: "انسولین", value: "Insulin" },
      { label: "تعداد", value: "Quantity" },
      { label: "دوز دارو", value: "Dose" },
      { label: "انسولین", value: "Insulin" },
      { label: "تعداد", value: "Quantity" },
      { label: "دوز دارو", value: "Dose" },
      { label: "انسولین", value: "Insulin" },
    ],
  },
};


./app/components/NavBar.tsx:
"use client";
import { useState, JSX } from "react";
import {
  BookOpen,
  ConnectionPointTwo,
  FileCollection,
  HomeTwo,
  PeopleSpeak,
  MingcuteExitLine,
} from "@/public/icons";
import Logo from "@/public/imgs/logo.png";
import Image from "next/image";
import Link from "next/link";

interface Props {
  className?: string;
}

interface NavBarValProps {
  value: string;
  icon: string;
  isActive: boolean;
  onClick: () => void;
}

const NavBarVal = ({
  value,
  icon,
  isActive,
  onClick,
}: NavBarValProps): JSX.Element => {
  return (
    <div
      className={`relative flex w-full flex-[0_0_auto] flex-col items-center justify-center self-stretch rounded-[10px] px-[25px] pt-2.5 pb-0 transition duration-300 ease-in-out whitespace-nowrap ${
        isActive
          ? "shadow-[inset_2px_4px_4px_#00000040] bg-[#b9d0aa57]"
          : "hover:bg-[#b9d0aa57] hover:translate-x-[-4px]"
      }`}
      onClick={onClick}
    >
      <Image
        className="relative h-[31px] w-[31px] transition duration-300 ease-in-out"
        alt={value}
        src={icon}
      />

      <div className="relative inline-flex flex-[0_0_auto] items-center justify-center gap-2.5 px-2.5 py-1.5 transition duration-300 ease-in-out">
        <div
          className={`text-[#1A604E] relative mt-[-1.00px] w-fit ext-lg leading-[normal] font-medium transition duration-300 ease-in-out ${
            isActive ? "text-shadow-active" : ""
          }`}
        >
          {value}
        </div>
      </div>
    </div>
  );
};

export const NavBar = ({ className }: Props): JSX.Element => {
  const [activeItem, setActiveItem] = useState<string>("خانه");

  const navels = [
    { value: "خانه", icon: HomeTwo },
    { value: "پرونده", icon: FileCollection },
    { value: "مسیر توانبخشی", icon: ConnectionPointTwo },
    { value: "توصیه ها و آموزش ها", icon: BookOpen },
    { value: "مشاوره", icon: PeopleSpeak },
  ];

  return (
    <div
      className={`bg-gray relative flex h-[1099px] w-[180px] flex-col items-center gap-14 px-0 py-3 shadow-[-4px_0px_46.7px_#0000001c] ${className}`}
    >
      {/* Logo */}
      <Link href="/">
        <Image className="!h-[122px] !w-[122px]" src={Logo} alt="Logo" />
      </Link>

      {/* Navigation Items */}
      <div className="relative flex w-full flex-[0_0_auto] flex-col items-end gap-[13px] self-stretch">
        {navels.map((data) => (
          <NavBarVal
            key={data.value}
            value={data.value}
            icon={data.icon}
            isActive={activeItem === data.value}
            onClick={() => setActiveItem(data.value)}
          />
        ))}
      </div>

      {/* Logout Section */}
      <div
        className={`absolute top-[918px] flex h-[86px] w-[197px] flex-col items-center justify-center gap-[7px] rounded-[10px] px-[25px] pt-2.5 pb-0 transition duration-300 ease-in-out ${
          activeItem === "خروج"
            ? "shadow-[inset_2px_4px_4px_#00000040] bg-[#b9d0aa57]"
            : "hover:bg-[#b9d0aa57] hover:translate-x-2"
        }`}
      >
        <Image
          className="relative h-[31px] w-[31px] transition duration-300 ease-in-out"
          alt="خروج"
          src={MingcuteExitLine}
        />

        <div className="relative inline-flex flex-[0_0_auto] items-center justify-center gap-2.5 px-2.5 py-1.5 transition duration-300 ease-in-out">
          <div
            className={`text-[#1A604E] relative mt-[-1.00px] w-fit text-lg leading-[normal] font-medium tracking-[0] transition duration-300 ease-in-out`}
          >
            خروج
          </div>
        </div>
      </div>
    </div>
  );
};


./app/components/index.tsx:
export { NavBar } from "./NavBar";
export { Tabs } from "./Tabs";
export { Header } from "./Header";
export { FrameList } from "./FrameList";
export { DropDown } from "./ui/DropDown";
export { Input } from "./ui/Input";
export { Button } from "./ui/Button";
export { FilePicker } from "./FilePicker";
export { Slider } from "./ui/Slider";
export { StarRating } from "./ui/StarRating";
export { FAQ } from "./ui/FAQ";
export { Notice } from "./ui/Notice";
export { Timeline } from "./ui/Timeline";
export { TickRing } from "@/public/icons";
export { Timer } from "./ui/Timer";
export { Card } from "./ui/Card";
export { DatePicker } from "./DatePicker";
export { RangeDown } from "./ui/RangeDown";


./app/components/FrameList.tsx:
"use client"
import { CheckBox } from "./ui/CheckBox";
import { RangeDown } from "./ui/RangeDown";
import { ArrowLeft } from "@/public/icons";
import { useState } from "react";

interface FrameListProps {
  title: string;
  items: Array<{ label: string; value: string }>;
}

export const FrameList = ({ title, items }: FrameListProps): JSX.Element => {
  const [isOpen, setIsOpen] = useState(false);
  const options = Array.from({ length: 11 }, (_, i) => i);

  const toggleList = () => setIsOpen(!isOpen);

  return (
    <div className="relative inline-flex flex-col items-end gap-[19px]">
      {/* Clickable header */}
      <div 
        className="relative inline-flex flex-[0_0_auto] items-center justify-center gap-[7px] p-2.5 cursor-pointer"
        onClick={toggleList}
      >
        <div className="relative mt-[-1.00px] w-fit  text-lg leading-[normal] font-medium tracking-[0] text-black [direction:rtl]">
          {title}
        </div>
        <img
          className="relative w-6 transition-transform duration-300"
          alt="Icon park arrow left"
          src={ArrowLeft}
          style={{ transform: isOpen ? 'rotate(270deg)' : 'rotate(180deg)' }}
        />
      </div>

      {/* Collapsible content */}
      <div
        className={`overflow-hidden transition-all duration-300 ${
          isOpen ? 'max-h-[1000px] opacity-100' : 'max-h-0 opacity-0'
        }`}
      >
        <div className="relative grid grid-cols-3 gap-[19px]">
          {items.map((item, index) => (
            <div key={index} className="relative flex flex-col items-end gap-[11px]">
              <RangeDown className="!w-[120px]" options={options} />
              <div className="relative inline-flex flex-[0_0_auto] items-center justify-center gap-2.5 p-2.5">
                <div className="relative mt-[-1.00px] w-fit  text-lg leading-[normal] font-medium tracking-[0] text-black [direction:rtl]">
                  {item.label}
                </div>
              </div>
              {index % 3 === 2 && (
                <div className="relative flex items-center justify-end gap-[13px]">
                  <div className="relative inline-flex flex-[0_0_auto] items-center justify-center gap-2.5 p-2.5">
                    <div className="relative mt-[-1.00px] w-fit  text-lg leading-[normal] font-medium tracking-[0] text-black [direction:rtl]">
                      {item.value}
                    </div>
                  </div>
                  <CheckBox className={undefined} active={false} />
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

./app/components/Tabs.tsx:
"use client"
import PropTypes from "prop-types";
import { Line1, Subtract } from "@/public/icons";
import { useRef, useState, useEffect } from "react";
import React, { JSX } from "react";
import Image from "next/image";

interface Props {
  varient: string;
  className?: string;
}

export const Tabs = ({ varient, className }: Props): JSX.Element => {
  const initialTabItems = [
    { value: "پیگیری", activate: false },
    { value: "فعالیت های پرونده", activate: false },
    { value: "ارجاعات", activate: false },
    { value: "تست ها", activate: false },
    { value: "آزمایش ها", activate: false },
    { value: "شرح حال اولیه", activate: false },
    { value: "مشخصات عمومی", activate: true },
  ];

  const [tabItems, setTabItems] = useState(initialTabItems);
  const climbRef = useRef<HTMLDivElement>(null);
  const tabContainerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const updateClimbPosition = () => {
      const tabElements = document.querySelectorAll('.tab-item');
      const widths = Array.from(tabElements).map(el => el.getBoundingClientRect().width);
      const activeIndex = tabItems.findIndex(item => item.activate);

      if (climbRef.current && activeIndex !== -1) {
        let leftPosition = 0;
        for (let i = 0; i < activeIndex; i++) {
          leftPosition += widths[i];
        }
        const climbWidth = climbRef.current.clientWidth;
        const newLeft = leftPosition + widths[activeIndex] / 2 - climbWidth / 2;
        climbRef.current.style.left = `${newLeft}px`;
        climbRef.current.style.transition = 'left 0.3s ease';
      }
    };

    updateClimbPosition();
    window.addEventListener('resize', updateClimbPosition);

    return () => {
      window.removeEventListener('resize', updateClimbPosition);
    };
  }, [tabItems]);

  const handleTabClick = (index: number) => {
    const updatedTabItems = tabItems.map((item, i) => ({
      ...item,
      activate: i === index,
    }));
    setTabItems(updatedTabItems);
  };

  return (
    <div
      ref={tabContainerRef}
      className={`flex h-[70px] md:h-[95px] items-center relative w-[80%] rounded-[35px] overflow-hidden shadow-shadows ${
        "bg-[#1a604e]"
      } ${className}`}
    >
      <div className="flex flex-nowrap h-full w-full justify-between">
        {tabItems.map(({ value, activate }, index) => (
          <div
            key={index}
            className={`tab-item flex-1 flex items-center justify-center gap-2.5 px-[10px] md:px-[20px] py-2.5 relative cursor-pointer ${
              activate && varient == "pre"
                ? "bg-[#1a604e] rounded-[35px] shadow-[inset_2px_4px_4px_#00000040] transition-all duration-300 ease-out"
                : "transition-all duration-300 ease-out"
            }`}
            onClick={() => handleTabClick(index)}
          >
            <div
              className={`relative w-fit font-normal text-white tracking-[0] leading-[normal] text-right whitespace-nowrap ${
                activate
                  ? "[font-family:'Pelak',Helvetica] [text-shadow:0px_0px_25px_#b9d0aa]"
                  : "[font-family:'Pelak-Regular',Helvetica]"
              }`}
              style={{
                fontSize: "clamp(12px, 2vw, 18px)", // Responsive font size
                WebkitTextStrokeWidth: activate ? "1px" : "0",
                WebkitTextStrokeColor: activate ? "#B9D0AA" : "transparent",
              }}
            >
              {value}
            </div>
          </div>
        ))}
      </div>
      {varient == "ligth" && <Climb ref={climbRef} />}
    </div>
  );
};

Tabs.propTypes = {
  varient: PropTypes.oneOf(["pre", "default", "ligth"]),
};

const Climb = React.forwardRef<HTMLDivElement>((_props, ref) => {
  return (
    <div ref={ref} className="absolute w-[180px] md:w-[228px] h-[65px] md:h-[85px]">
      <div className="relative h-[68px] md:h-[88px] -top-0.5">
        <Image
          className="absolute w-[80px] md:w-[109px] h-[4px] md:h-[5px] top-0 left-[40px] md:left-[59px] object-cover"
          alt="Line"
          src={Line1}
        />
        <Image
          className="absolute w-[180px] md:w-[228px] h-[65px] md:h-[85px] top-0.5 left-0"
          alt="Subtract"
          src={Subtract}
        />
      </div>
    </div>
  );
});

Climb.displayName = "Climb";

./app/components/FilePicker.tsx:
"use client"
import React, { useCallback, useState } from "react";
import { FolderUpload, Plus } from "@/public/icons";
import { Button } from "./ui/Button";

interface FilePickerProps {
	buttonName:string;
	title: string;
	onFileSelected: (files: FileList) => void;
}

export const FilePicker = ({ buttonName, title, onFileSelected }: FilePickerProps) => {
	const [isDragging, setIsDragging] = useState(false);

	const handleFileInput = (files: FileList | null) => {
		if (files && files.length > 0) {
			onFileSelected(files);
		}
	};

	const handleDragOver = useCallback((e: React.DragEvent) => {
		e.preventDefault();
		setIsDragging(true);
	}, []);

	const handleDragLeave = useCallback((e: React.DragEvent) => {
		e.preventDefault();
		setIsDragging(false);
	}, []);

	const handleDrop = useCallback(
		(e: React.DragEvent) => {
			e.preventDefault();
			setIsDragging(false);
			const files = e.dataTransfer.files;
			if (files) {
				onFileSelected(files);
			}
		},
		[onFileSelected],
	);

	return (
		<div className="flex flex-row-reverse gap-12 items-center">
			{/* Title */}
			<div className="max-w-70 block px-4 text-right  text-lg font-medium text-black">
				{title}
			</div>
			<div
				className="relative p-6"
				style={{
					borderRadius: "0.3125rem",
					border: "0.2rem solid #1A604E",
				}}
				onDragOver={handleDragOver}
				onDragLeave={handleDragLeave}
				onDrop={handleDrop}
			>
				{/* Hidden file input */}
				<input
					type="file"
					className="hidden"
					id="fileInput"
					onChange={(e) => handleFileInput(e.target.files)}
					multiple
					accept="image/*"
				/>

				{/* Main container */}
				<div className="relative inline-flex h-[258px] w-[621px] flex-col items-center justify-center gap-4">
					{/* Upload icon */}
					<img
						className="mt-4 h-[70px] w-[70px]"
						alt="Upload folder"
						src={FolderUpload}
					/>

					{/* Drop text */}
					<p className="px-8 text-center  text-lg font-medium text-[#88997d]">
						برای بارگذاری عکس، فایل خود را بکشید و اینجا رها کنید
					</p>

					{/* Custom file selection button */}
					<label
						htmlFor="fileInput"
						className="bg-light-green mt-4 cursor-pointer rounded-lg px-6 py-2 shadow-[2px_-1px_66.3px_18px_#ffffff]"
					>
						<Button text={buttonName} icon={Plus} />
					</label>

					{/* Drag overlay */}
					{isDragging && (
						<div
							className="bg-light-green bg-opacity-20 absolute inset-0 flex items-center justify-center"
							style={{
								borderRadius: "0.3125rem",
								border: "1.5px solid #1A604E",
							}}
						>
							<p className="text-dark-green text-xl font-bold">
								فایل را اینجا رها کنید
							</p>
						</div>
					)}
				</div>
			</div>
		</div>
	);
};


./app/components/ui/Button.tsx:
"use client"
import { HTMLAttributes, JSX, useState } from "react";
import Image from "next/image";

interface Props extends HTMLAttributes<HTMLDivElement> {
  text: string;
  className?: string;
  icon?: string;
  variant?: "primary" | "warning" | "secondary";
}

export const Button = ({
  text,
  className,
  icon,
  variant = "primary",
  ...rest
}: Props): JSX.Element => {
  const [isHovered, setIsHovered] = useState(false);

  const variantClasses = {
    primary: {
      bg: icon ? "bg-[#B9D0AA]" : "bg-[#1A604E]",
      text: "text-white",
      shadow: "shadow-[#1A604E]"
    },
    warning: {
      bg: icon ? "bg-[#F4D7DA]" : "bg-[#D85562]",
      text: "text-white",
      shadow: "shadow-[#D85562]"
    },
    secondary: {
      bg: icon ? "bg-[#F4D7DA]" : "bg-[#B9D0AA]",
      text: "text-[#1A604E]",
      shadow: "shadow-[#D85562]"
    }
  };

  const getBoxShadow = () => {
    return ''
    if (icon) {
      return isHovered 
        ? "shadow-[-6px_7px_25px_-6px_var(--shadow-color),_2px_-1px_70px_20px_#ffffff]"
        : "shadow-[-6px_7px_21px_-6px_var(--shadow-color),_2px_-1px_66.3px_18px_#ffffff]";
    }
    return isHovered
      ? "shadow-[2px_-1px_70px_20px_#FFF,_-6px_7px_25px_-6px_var(--shadow-color)]"
      : "shadow-[2px_-1px_66.3px_18px_#FFF,_-6px_7px_21px_-6px_var(--shadow-color)]";
  };

  return (
    <div
      className={`group relative inline-flex items-center justify-center overflow-hidden rounded-[7px] transition-all duration-300 ease-[cubic-bezier(0.4,0,0.2,1)] hover:-translate-y-0.5 active:translate-y-0 active:scale-95 ${
        icon ? "h-[63px] px-[13px] py-[5px]" : "px-[13px] py-0"
      } ${variantClasses[variant].bg} ${
        variantClasses[variant].text
      } ${getBoxShadow} ${className}`}
      {...rest}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      style={{
        "--shadow-color": variantClasses[variant].shadow.replace("shadow-", "")
      } as React.CSSProperties}
    >
      {icon && (
        <div className="relative overflow-hidden">
          <Image
            className="relative h-6 w-6 transition-transform duration-300 group-hover:scale-110 group-active:scale-95"
            src={icon}
            alt="+"
            style={{ 
              filter: {
                primary: "brightness(0) saturate(100%) invert(13%) sepia(15%) saturate(1817%) hue-rotate(81deg) brightness(94%) contrast(86%)",
                warning: "brightness(0) saturate(100%) invert(48%) sepia(53%) saturate(2013%) hue-rotate(327deg) brightness(93%) contrast(92%)",
                secondary: "brightness(0) saturate(100%) invert(48%) sepia(53%) saturate(2013%) hue-rotate(327deg) brightness(93%) contrast(92%)"
              }[variant]
            }}
          />
          <span className="absolute inset-0 scale-0 rounded-full bg-white/20 transition-transform duration-500 group-active:scale-100" />
        </div>
      )}

      <div
        className={`relative flex items-center justify-center gap-2.5 p-2.5 ${icon ? "w-36" : ""}`}
      >
        <div
          className={`relative mt-[-1.00px] w-fit whitespace-nowrap text-[1.4rem] leading-[normal] font-bolder tracking-[0] transition-transform duration-300 group-hover:translate-x-1 ${
            icon ? "text-[#1A604E]" : ""
          }`}
        >
          {text}
        </div>
      </div>
    </div>
  );
};

./app/components/ui/Slider.stories.tsx:
import {Slider} from "./Slider";
export default {
  component: Slider,
  title: 'Base/Slider',
  tags: ["autodocs"],
};

export const Sample = {
  args: {
  },
};


./app/components/ui/DropDown.tsx:
"use client"
import React, { useState } from "react";
import { ArrowDown } from "@/public/icons";
import Image from "next/image";

interface DropdownProps {
  options: string[];
  placeholder?: string;
  className?: string;
}

export const DropDown: React.FC<DropdownProps> = ({
  options,
  placeholder = "گزینه مورد نظر را انتخاب کنید",
  className = ""
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedOption, setSelectedOption] = useState<string | null>(null);

  const toggleDropdown = () => setIsOpen(!isOpen);

  const handleOptionClick = (option: string) => {
    setSelectedOption(option);
    setIsOpen(false);
  };

  return (
    <div className={`relative w-[429px] ${className}`}>
      <div
        className={`flex flex-col items-start gap-2.5 p-2.5 relative bg-[#eaeef1] rounded-[15px] overflow-hidden shadow-shadows ${
          isOpen ? "rounded-b-none" : ""
        }`}
      >
        {/* Main dropdown trigger */}
        <div
          className="flex items-center justify-between px-[5px] py-0.5 relative self-stretch w-full flex-[0_0_auto] rounded-[5px] overflow-hidden border-[1.5px] border-solid border-[#1a604e] cursor-pointer"
          onClick={toggleDropdown}
        >
          <Image
            className="relative w-[34px] transform transition-transform"
            alt="Icon park arrow down"
            src={ArrowDown}
            style={{ transform: isOpen ? "rotate(180deg)" : "none" }}
          />
          <div className="inline-flex items-center justify-center gap-2.5 p-2.5 relative flex-[0_0_auto]">
            <p className="relative w-fit mt-[-1.00px] [font-family:'Pelak-Regular',Helvetica] font-normal text-[#1A604E] text-lg text-left tracking-[0] leading-[normal] [direction:rtl]">
              {selectedOption || placeholder}
            </p>
          </div>
        </div>

        {/* Dropdown options */}
        {isOpen && (
          <div className="w-full">
            {options.map((option, index) => (
              <div
                key={index}
                className="flex flex-col items-end gap-2.5 px-[5px] py-0.5 relative self-stretch w-full flex-[0_0_auto] rounded-[5px] overflow-hidden border-[1.5px] border-solid border-[#1a604e] mt-2 cursor-pointer hover:bg-[#d5e0e6] transition-colors"
                onClick={() => handleOptionClick(option)}
              >
                <div className="inline-flex items-center justify-center gap-2.5 p-2.5 relative flex-[0_0_auto]">
                  <div className="relative w-fit mt-[-1.00px] [font-family:'Pelak-Regular',Helvetica] font-normal text-[#1A604E] text-lg tracking-[0] leading-[normal] [direction:rtl]">
                    {option}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

./app/components/ui/Timeline.tsx:
import React from "react";
import Image from "next/image";

interface TimelineItem {
  title: string;
  date: string;
  iconSrc: string;
}

interface TimelineProps {
  items: TimelineItem[];
}

export const Timeline: React.FC<TimelineProps> = ({ items }) => {
  return (
    <div className="relative w-[336px]" dir="rtl">
      {items.map((item, index) => {
        const isLast = index === items.length - 1;
        const isFirst = index === 0;
        const lineHeight = isFirst ? "h-9" : "h-[34px]";

        return (
          <div
            key={index}
            className={`relative ${isLast ? "bg-[#1a604e1a] rounded-[15px] p-4" : "mb-4"}`}
          >
            {/* Icon */}
            <div className="absolute right-0 top-0 w-8 h-8 flex items-center justify-center">
              <Image
                src={item.iconSrc}
                alt="timeline-icon"
                className="w-6 h-6"
              />
            </div>

            {/* Vertical line */}
            {!isLast && (
              <div
                className={`absolute right-4 top-[30px] w-[2px] bg-[#1a604e9a] ${lineHeight}`}
              />
            )}

            {/* Content */}
            <div className="pr-12">
              <div className="[font-family:'Pelak-Regular',Helvetica] font-normal text-base text-black">
                {item.title}
              </div>
              <div className="[font-family:'Pelak-light',Helvetica] font-normal text-sm text-black mt-1">
                {item.date}
              </div>
            </div>
          </div>
        );
      })}
    </div>
  );
};


./app/components/ui/Notice.stories.tsx:
import { Notice } from "./Notice";
export default {
  component: Notice,
  title: 'Base/Notice Message',
  tags: ["autodocs"],
};

export const Sample = {
  args: {
    value:"درصورتی که در زمان مقرر مراجعه کرده اید، تایید کنید."
  },
};


./app/components/ui/CheckBox.tsx:
import PropTypes from "prop-types";
import { useReducer } from "react";

interface Props {
  active?: boolean;
  className?: string;
}

export const CheckBox = ({ active = false, className }: Props): JSX.Element => {
  const initialState = active ? "default" : "not-select";
  const [state, dispatch] = useReducer(reducer, { variant: initialState });

  return (
    <div
      className={`flex items-center p-[5px] relative ${
        state.variant === "not-select" ? "w-10 h-10 rotate-90" : "h-10 w-10"
      } flex-col rounded-[7px] gap-2.5 bg-[#eaeef1] overflow-hidden justify-center ${
        state.variant === "hover-1" || state.variant === "not-select"
          ? "shadow-[inset_-7px_7px_4.7px_-5px_#00000059,inset_13px_-9px_4.3px_-12px_#ffffffa1]"
          : "shadow-[-6px_7px_21px_-6px_#1a604e,2px_-1px_66.3px_18px_#ffffff]"
      } ${className}`}
      onMouseEnter={() => dispatch("mouse_enter")}
      onClick={() => dispatch("click")}
      onMouseLeave={() => dispatch("mouse_leave")}
    >
      <div
        className={`rounded-sm relative ${
          state.variant === "hover-2"
            ? "w-2.5 h-2.5"
            : state.variant === "hover-1"
            ? "w-[30px] h-[30px]"
            : "w-[22px] h-[22px]"
        } ${
          state.variant === "hover-1" || state.variant === "not-select"
            ? "shadow-[-1px_1px_4px_#00000040,inset_-1px_1px_4px_#ffffff]"
            : "shadow-[inset_-1px_1px_4px_#00000040,-1px_1px_4px_#ffffff]"
        } ${
          state.variant === "not-select"
            ? "bg-[#eaeef1]"
            : state.variant === "hover-1"
            ? "bg-[#B9D0AADB]"
            : "bg-[#b9d0aa]"
        } transition-all duration-300`}
      />
    </div>
  );
};

function reducer(state: { variant: string }, action: string) {
  switch (state.variant) {
    case "default":
      return action === "click"
        ? { variant: "not-select" }
        : action === "mouse_enter"
        ? { variant: "hover-2" }
        : state;
    case "hover-2":
      return action === "mouse_leave"
        ? { variant: "default" }
        : action === "click"
        ? { variant: "not-select" }
        : state;
    case "not-select":
      return action === "click"
        ? { variant: "default" }
        : action === "mouse_enter"
        ? { variant: "hover-1" }
        : state;
    case "hover-1":
      return action === "mouse_leave"
        ? { variant: "not-select" }
        : action === "click"
        ? { variant: "default" }
        : state;
    default:
      return state;
  }
}

CheckBox.propTypes = {
  active: PropTypes.bool,
  className: PropTypes.string,
};

./app/components/ui/FAQ.tsx:
"use client"
import { useState } from 'react';
import { ArrowDown } from "@/public/icons";
import Image from 'next/image';

interface FAQProps {
  title: string;
  description: string;
  variant?: 'primary' | 'warning';
  className?: string;
}

export const FAQ = ({ 
  title,
  description,
  variant = 'primary',
  className = ''
}: FAQProps) => {
  const [isOpen, setIsOpen] = useState(false);
  
  const variantStyles = {
    primary: {
      border: '#1A604E',
      title: '#1A604E',
      iconFilter: 'brightness(0) saturate(100%) invert(13%) sepia(15%) saturate(1817%) hue-rotate(81deg) brightness(94%) contrast(86%)'
    },
    warning: {
      border: '#D85562',
      title: '#D85562',
      iconFilter: 'brightness(0) saturate(100%) invert(48%) sepia(53%) saturate(2013%) hue-rotate(327deg) brightness(93%) contrast(92%)'
    }
  };

  return (
    <div
      className={`max-w-[1414px] items-center w-full flex gap-2.5 shadow-[-8px_23px_81.4px_#1a604e1a,8px_-23px_81.4px_#ffffff] p-2.5 overflow-hidden rounded-[6px] bg-[#eaeef1] relative transition-all duration-300 ${className}`}
      style={{
        border: `1.5px solid ${variantStyles[variant].border}`,
        height: isOpen ? 'auto' : '51px'
      }}
    >
      <div className="flex flex-col w-full">
        <div 
          className="flex items-center justify-between w-full p-4 cursor-pointer"
          onClick={() => setIsOpen(!isOpen)}
        >
          <Image
            className={`w-8 h-8 transition-transform duration-300 ${isOpen ? 'rotate-180' : ''}`}
            style={{ filter: variantStyles[variant].iconFilter }}
            src={ArrowDown}
            alt="Toggle icon"
          />
          <h3 
            className="flex-1 font-bold whitespace-nowrap [direction:rtl] transition-colors duration-300"
            style={{ color: variantStyles[variant].title }}
          >
            {title}
          </h3>
        </div>

        <div
          className={`overflow-hidden transition-all duration-300 ${
            isOpen ? 'max-h-[500px] opacity-100' : 'max-h-0 opacity-0'
          }`}
        >
          <p className="p-4  font-medium text-black text-xl tracking-[0] leading-[normal] [direction:rtl]">
            {description}
          </p>
        </div>
      </div>
    </div>
  );
};

./app/components/ui/Timeline.stories.tsx:
import {Timeline} from "./Timeline";
import { TickRing } from "../../static/icons";

export default {
  component: Timeline,
  title: 'Base/Time Line',
  tags: ["autodocs"],
};

export const Sample = {
  args: {
    items: [
      {
        title: "ویزیت توسط متخصص توانبخشی",
        date: "شنبه 8 دی ماه - دکتر روحانی",
        iconSrc: TickRing,
      },
      {
        title: "جلسه تمرین گفتاردرمانی",
        date: "سه شنبه 11 دی ماه - دکتر عطایی",
        iconSrc: TickRing,
      },
      {
        title: "جلسه تمرین کاردرمانی",
        date: "پنج شنبه 13 دی ماه - دکتر نوری",
        iconSrc: TickRing,
      },
    ]
  },
};


./app/components/ui/Slider.tsx:
"use client"
import React, { useState } from "react";

interface SliderProps {
  min: number;
  max: number;
  steps: number;
  defaultValue?: number;
  onChange?: (value: number) => void;
}

export const Slider: React.FC<SliderProps> = ({
  min = 0,
  max = 10,
  steps = 10,
  defaultValue = 5,
  onChange,
}) => {
  const [value, setValue] = useState(defaultValue);
  const stepArray = Array.from({ length: steps + 1 }, (_, i) => min + (max - min) * (i / steps));

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = parseFloat(e.target.value);
    setValue(newValue);
    onChange?.(newValue);
  };

  const percentage = ((value - min) / (max - min)) * 100;

  return (
    <div className="relative w-full px-8 py-12">
      {/* Step labels */}
      <div className="flex justify-between w-full absolute top-0 left-0">
        {stepArray.map((step) => (
          <div
            key={step}
            className="w-8 text-center font-bold text-gray-800 text-xl"
          >
            {step}
          </div>
        ))}
      </div>

      {/* Track container */}
      <div className="relative w-full h-16">
        {/* Background track */}
        <div className="absolute w-full h-2 bg-gray-200 top-1/2 -translate-y-1/2 rounded-full" />
        
        {/* Colored progress track */}
        <div 
          className="absolute h-4 bg-[#1A604E] top-1/2 -translate-y-1/2 rounded-full"
          style={{
            width: `${percentage}%`,
            transition: "width 0.3s cubic-bezier(0.4, 0, 0.2, 1)",
          }}
        />
        
        {/* Step markers */}
        <div className="flex justify-between w-full absolute top-1/2 -translate-y-1/2">
          {stepArray.map((step) => (
            <div
              key={step}
              className="w-2 h-2 bg-[#b9d0aa] rounded-full"
            />
          ))}
        </div>

        {/* Slider thumb */}
        <div
          className="absolute top-1/2 -translate-y-1/2 -ml-6"
          style={{
            left: `${percentage}%`,
            transition: "left 0.3s cubic-bezier(0.4, 0, 0.2, 1)",
          }}
        >
          <div className="flex flex-col items-center justify-center gap-2.5 p-[5px] bg-[#eaeef1] rounded-lg shadow-[-6px_7px_21px_-6px_#1a604e,2px_-1px_66.3px_18px_#ffffff] transition-transform duration-200 hover:scale-105">
            <div className="w-12 h-12 bg-[#b9d0aa] rounded-md shadow-[inset_-1px_1px_4px_#00000040,-1px_1px_4px_#ffffff]" />
          </div>
        </div>
      </div>

      {/* Hidden input */}
      <input
        type="range"
        min={min}
        max={max}
        step={(max - min) / steps}
        value={value}
        onChange={handleChange}
        className="absolute w-full h-full opacity-0 cursor-pointer top-0 left-0"
      />
    </div>
  );
};


./app/components/ui/Input.stories.tsx:
import { Input } from './Input';

export default {
  component: Input,
  title: 'Base/Input',
  tags: ['autodocs'],
};

export const Sample = {
  args: {
    title:'نام و نام خانوادگی',
    placeholder: 'متن مورد نظر را وارد کنید',
    centerize: false,
    variant: 'primary'
  },
};




./app/components/ui/CheckBox.stories.tsx:
import { CheckBox } from './CheckBox';

export default {
  component: CheckBox,
  title: 'Base/Check Box',
  tags: ['autodocs'],
};

export const Sample = {
  args: {
    active: true
  },
};




./app/components/ui/StarRating.tsx:
"use client"
import { useState, JSX } from "react";
import PropTypes from "prop-types";

interface StarRatingProps {
  value: number;
  size?: number;
  onChange?: (value: number) => void;
}

export const StarRating = ({
  value = 0,
  size = 24,
  onChange,
}: StarRatingProps): JSX.Element => {
  const [hoverValue, setHoverValue] = useState<number | null>(null);

  const getColor = (rating: number) => {
    if (rating === 0) return "transparent";
    if (rating >= 1 && rating <= 2) return "#D85562";
    if (rating >= 3 && rating <= 5) return "#1A604E";
    return "transparent";
  };

  const handleClick = (rating: number) => {
    if (onChange) {
      onChange(rating);
    }
  };

  const handleMouseEnter = (rating: number) => {
    setHoverValue(rating);
  };

  const handleMouseLeave = () => {
    setHoverValue(null);
  };

  const stars = Array(5).fill(0);

  return (
    <div className="inline-flex items-center gap-1 w-min">
      {stars.map((_, index) => {
        const currentRating = index + 1;
        const isFilled = (hoverValue ?? value) >= currentRating;
        const fillColor = getColor(hoverValue ?? value);
        const borderColor =
          value <= 2 && value != 0 && index < value ? "#D85562" : "#1A604E";

        return (
          <div
            key={index}
            onClick={() => handleClick(currentRating)}
            onMouseEnter={() => handleMouseEnter(currentRating)}
            onMouseLeave={handleMouseLeave}
            style={{
              cursor: "pointer",
              transition: "transform 0.2s ease",
            }}
            onMouseDown={(e) => {
              e.currentTarget.style.transform = "scale(0.9)";
            }}
            onMouseUp={(e) => {
              e.currentTarget.style.transform = "scale(1)";
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.transform = "scale(1)";
            }}
          >
            <svg
              width={size}
              height={size}
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z"
                fill={isFilled ? fillColor : "transparent"}
                stroke={borderColor}
                strokeWidth="2"
              />
            </svg>
          </div>
        );
      })}
    </div>
  );
};

StarRating.propTypes = {
  value: PropTypes.number.isRequired,
  size: PropTypes.number,
  onChange: PropTypes.func,
};

StarRating.defaultProps = {
  size: 24,
  onChange: undefined,
};


./app/components/ui/Container.tsx:
export const Container = () => {

    return (
      <>
        <h1 className="mx-auto bg-yellow-600 rounded-lg block p-2 text-center w-fit font-bold mt-14">Hi honey</h1>
      </>
    )
}

./app/components/ui/DropDown.stories.tsx:
import { DropDown } from "./DropDown";
export default {
  component: DropDown,
  title: 'Base/Drop Down',
  tags: ["autodocs"],
};

export const Sample = {
  args: {
    options: ["گزینه 1", "گزینه 2", "گزینه 3"],
    placeholder: "گزینه مورد نظر را انتخاب کنید",
  },
};


./app/components/ui/Card.stories.tsx:
import { Card } from "./Card";

export default {
  component: Card,
  title: 'Base/Card',
  tags: ["autodocs"],
};

export const Sample = {
  args: {
    title: "فیزیوتراپی",
    description: "وقت رزرو شده",
    closeHandler: () => console.log("Closed"),
    variant: "secondary",
  },
};


./app/components/ui/FAQ.stories.tsx:
import { FAQ } from "./FAQ";
export default {
  component: FAQ,
  title: 'Base/Frequently Asked Questions',
  tags: ["autodocs"],
};

export const Sample = {
  args: {
    title: 'Base/خانه پارکینسون چه می کند؟',
    description: 'rTMS یا تحریک مغناطیسی مغز، یک روش غیرتهاجمی است که با ارسال پالس‌های مغناطیسی به بخش‌های خاصی از مغز، می‌تواند به بهبود برخی علائم پارکینسون کمک کند. این روش ممکن است لرزش و سفتی عضلات را کاهش دهد و یا خلق‌وخو و حافظه را بهتر کند. تأثیرات آن موقتی است و نیاز به جلسات منظم دارد. rTMS جایگزین دارو یا درمان اصلی نیست، اما می‌تواند به‌عنوان یک روش کمکی مؤثر باشد.',
    variant: 'primary'
  },
};


./app/components/ui/RangeDown.tsx:

interface DropDownProps {
  className?: string;
  options: number[];
}

export const RangeDown = ({ className, options }: DropDownProps): JSX.Element => (
  <select
    className={`flex h-[50px] items-center justify-end gap-2.5 px-[9px] py-1 relative rounded-[5px] overflow-hidden border-[1.5px] border-solid border-[#1a604e] bg-[#eaeef1] text-[#1a604e] ${className}`}
  >
    {options.map((option) => (
      <option key={option} value={option}>
        {option}
      </option>
    ))}
  </select>
);



./app/components/ui/RangeDown.stories.tsx:
import { RangeDown } from "./RangeDown";
export default {
  component: RangeDown,
  title: 'Base/Range Down number',
  tags: ["autodocs"],
};

export const Sample = {
  args: {
    options: Array.from({ length: 11 }, (_, i) => i)
  },
};


./app/components/ui/StarRating.stories.tsx:
import { StarRating } from "./StarRating";

export default {
  component: StarRating,
  title: 'Base/Star Rating',
  tags: ["autodocs"],
};

export const Sample = {
  args: {
    value:2
  },
};


./app/components/ui/Card.tsx:
import { ReactNode } from "react";
import { RadixIconsCrossCircled } from "@/public/icons";
import { JSX } from "react";

type Variant = "primary" | "secondary" | "warning";

interface CardProps {
  title: string;
  description: string;
  closeHandler: () => void;
  variant?: Variant;
  children?: ReactNode;
}

export const Card = ({
  title,
  description,
  closeHandler,
  variant = "primary",
  children,
}: CardProps): JSX.Element => {
  const variantConfig = {
    primary: {
      bg: "bg-[#1a604e]",
      text: "text-white",
      color: 'white'
    },
    secondary: {
      bg: "bg-[#B9D0AA]",
      text: "text-[#1A604E]",
      color: '#1A604E'
    },
    warning: {
      bg: "bg-[#D85562]",
      text: "text-white",
      color: 'white'
    },
  };

  return (
    <div className="shadow-shadows relative flex w-fit flex-col items-start gap-[18px] overflow-hidden rounded-[25px] bg-[#eaeef1]">
      {/* Header Section */}
      <div
        className={`relative flex w-full flex-[0_0_auto] items-center justify-between self-stretch px-5 py-4 ${variantConfig[variant].bg} overflow-hidden rounded-[15px_15px_0px_0px]`}
      >
        <RadixIconsCrossCircled
          className="relative h-[35px] w-[35px] cursor-pointer"
          color={variantConfig[variant].color}
          closeHandler={closeHandler}
        />
        <div className="relative inline-flex flex-[0_0_auto] flex-col items-end">
          <div className="relative inline-flex flex-[0_0_auto] items-center justify-end gap-2.5 p-2.5">
            <div
              className={`relative mt-[-1.00px] w-fit text-left  text-xl leading-[normal] font-medium tracking-[0] [direction:rtl] ${variantConfig[variant].text}`}
            >
              {title}
            </div>
          </div>
          <div className="relative mt-[-9px] inline-flex flex-[0_0_auto] items-center justify-center gap-2.5 px-2.5 py-0">
            <div
              className={`relative mt-[-1.00px] w-fit text-left [font-family:'Pelak-Regular',Helvetica] text-sm leading-[normal] font-normal tracking-[0] [direction:rtl] ${variantConfig[variant].text}`}
            >
              {description}
            </div>
          </div>
        </div>
      </div>

      {/* Rest of the card content (same as original) */}
      <div className="relative flex w-full p-4 pb-5 flex-col items-center justify-center gap-5 self-stretch py-0">
        {children}
      </div>
    </div>
  );
};


./app/components/ui/Button.stories.tsx:
import { Button } from './Button';

export default {
  component: Button,
  title: 'Base/Button',
  tags: ['autodocs'],
};

export const Sample = {
  args: {
    text: 'اضافه کردن پزشک',
    variant: 'primary'
  },
};




./app/components/ui/Notice.tsx:
import { ReactNode } from "react";

interface Props {
  variant?: "primary" | "warning" | "secondary";
  value: string | ReactNode;
  className?: string;
}

export const Notice = ({
  variant = "primary",
  value,
  className = "",
}: Props) => {
  const variantStyles = {
    primary: {
      color: '#1A604E'
    },
    warning: {
      color: '#D85562'
    },
    secondary: {
      color: '#1A604E'
    },
  };

  return (
    <div className={`flex flex-col items-start gap-2.5 p-2.5 relative rounded-[15px] shadow-shadows w-full whitespace-nowrap`}
      style={{backgroundColor: variant == 'secondary' ? "rgba(185, 208, 170, 0.51)" : 'rgba(234, 238, 241, 1)'}}>
      <div
        className={`relative flex items-center justify-end gap-2.5 rounded-[5px] border-[1.5px] border-solid px-[9px] py-[7px] ${className}`}
        style={{ borderColor: variantStyles[variant].color }}
      >
        <p className={`relative w-fit mt-[-1.00px] font-normal text-lg text-left tracking-[0] leading-[normal] [direction:rtl]`}
        style={{color: variantStyles[variant].color}}>
          {value}
        </p>
      </div>
    </div>
  );
};


./app/components/ui/Input.tsx:
import { InputHTMLAttributes } from 'react';

interface InputProps extends InputHTMLAttributes<HTMLInputElement> {
  title: string;
  placeholder?: string;
  className?: string;
  maxWidth?: string;
  centerize?: boolean;
  variant?: 'primary' | 'warning';
}

export const Input = ({ 
  title,
  placeholder, 
  className,
  maxWidth = "max-w-[429px]",
  centerize = false,
  variant = 'primary',
  type = 'text',
  ...rest
}: InputProps) => {
  const variantStyles = {
    primary: {
      border: '#1A604E',
      placeholder: '#1A604EBA',
      focusRing: '#1A604E'
    },
    warning: {
      border: '#D85562',
      placeholder: '#D85562BA',
      focusRing: '#D85562'
    }
  };

  return (
    <div className={`flex flex-col items-end gap-1 relative w-72 ${maxWidth} mx-auto`}>
      <div className="inline-flex items-center justify-end gap-2.5 p-2.5 relative flex-[0_0_auto] z-[1] w-full">
        <div className={`relative w-fit font-medium text-[${variantStyles[variant].border}] text-lg tracking-[0] leading-[normal]`}>
          {title}
        </div>
      </div>
      
      <input
        {...rest}
        type={type}
        placeholder={placeholder || "متن مورد نظر را وارد کنید"}
        className={`
          w-full h-[50px] px-4 py-0.5 rounded-[5px] border-[2px] border-solid text-lg 
          focus:outline-none focus:ring-2 focus:border-transparent max-w-72 ${className}
          border-[${variantStyles[variant].border}]
          text-[${variantStyles[variant].border}]
          shadow-[inset_-1px_1px_4px_#00000040,_-1px_1px_4px_#ffffff]
          placeholder:text-[${variantStyles[variant].placeholder}]
          ${centerize ? 'text-center placeholder:text-center' : 'text-right placeholder:text-right'}
          focus:ring-[${variantStyles[variant].focusRing}]
        `}
      />
    </div>
  );
};

./app/components/ui/Timer/AnimatedNumber.tsx:
"use client"
import { useState, useEffect } from "react";

interface AnimatedNumberProps {
  value: string;
  className?: string;
}

export const AnimatedNumber = ({ value, className }: AnimatedNumberProps) => {
  const [displayValue, setDisplayValue] = useState(value);
  const [animationKey, setAnimationKey] = useState(0);

  useEffect(() => {
    if (value !== displayValue) {
      setAnimationKey(prev => prev + 1);
      setDisplayValue(value);
    }
  }, [value]);

  return (
    <div 
      key={animationKey}
      className={`relative h-[40px] flex justify-center overflow-hidden ${className}`}
    >
      <div className="absolute animate-slide-in [font-family:'Poppins-Bold',Helvetica] font-bold text-[#1a604e] text-[32px] text-center tracking-[0] leading-[normal]">
        {displayValue.toString().padStart(2, "0")}
      </div>
    </div>
  );
};

./app/components/ui/Timer/index.tsx:
"use client"
import { useState, useEffect } from "react";
import { AnimatedNumber } from "./AnimatedNumber";
import { convertToPersian } from "@/app/util";

interface Props {
  day: number;
  hour: number;
  minutes: number;
  className?: string;
  divClassName?: string;
}

interface TimeLeft {
  days: number;
  hours: number;
  minutes: number;
}

export const Timer = ({ day, hour, minutes, className, divClassName }: Props) => {
  const [timeLeft, setTimeLeft] = useState<TimeLeft>({
    days: 0,
    hours: 0,
    minutes: 0,
  });

  useEffect(() => {
    const calculateTargetDate = () => {
      const now = new Date();
      const target = new Date(now.getFullYear(), now.getMonth(), day, hour, minutes);
      if (target < now) target.setMonth(target.getMonth() + 1);
      return target;
    };

    const calculateTimeLeft = (target: Date): TimeLeft => {
      const difference = target.getTime() - Date.now();
      if (difference <= 0) return { days: 0, hours: 0, minutes: 0 };

      return {
        days: Math.floor(difference / (1000 * 60 * 60 * 24)),
        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
        minutes: Math.floor((difference / (1000 * 60)) % 60),
      };
    };

    const targetDate = calculateTargetDate();
    const updateTimer = () => setTimeLeft(calculateTimeLeft(targetDate));
    
    updateTimer();
    const timerId = setInterval(updateTimer, 1000);
    return () => clearInterval(timerId);
  }, [day, hour, minutes]);

  return (
    <div
      className={`flex flex-col w-fit items-end px-2.5 py-2 relative rounded-[15px] overflow-hidden backdrop-blur-[293px] backdrop-brightness-[100%] [-webkit-backdrop-filter:blur(293px)_brightness(100%)] [background:linear-gradient(180deg,rgba(185,208,170,0.66)_0%,rgba(255,255,255,0)_54.99%,rgba(185,208,170,0.66)_98.32%)] ${className}`}
    >
      <div className="flex items-center gap-2 relative self-stretch w-full flex-[0_0_auto]">
        {["روز", "ساعت", "دقیقه"].map((label) => (
          <div 
            key={label}
            className="inline-flex items-center justify-center gap-1 p-1 relative flex-[1_1_0] min-w-[60px]"
          >
            <div className="relative w-fit [font-family:'PelakFA-light',Helvetica] font-normal text-[#1a604e] text-[10px] text-center tracking-[0] leading-[normal] whitespace-nowrap [direction:rtl]">
              {label}
            </div>
          </div>
        ))}
      </div>

      <div className="flex items-center justify-center gap-1 relative self-stretch w-full flex-[0_0_auto]">
        <AnimatedNumber value={convertToPersian(timeLeft.days)} className={`${divClassName} min-w-[40px]`} />
        <div className="relative w-fit [font-family:'Poppins-Bold',Helvetica] font-bold text-[#1a604e] text-[32px] mx-1">
          :
        </div>
        <AnimatedNumber value={convertToPersian(timeLeft.hours)} className="min-w-[40px]" />
        <div className="relative w-fit [font-family:'Poppins-Bold',Helvetica] font-bold text-[#1a604e] text-[32px] mx-1">
          :
        </div>
        <AnimatedNumber value={convertToPersian(timeLeft.minutes)} className="min-w-[40px]" />
      </div>
    </div>
  );
};

./app/components/ui/Timer/index.stories.tsx:
import { Timer } from './';

export default {
  component: Timer,
  title: 'Base/Timer Count Down',
  tags: ['autodocs'],
};

const now = new Date();
now.setHours(now.getHours() + 3);
export const Sample = {
  args: {
    day: now.getDay(),
    hour: now.getHours(),
    minutes:now.getMinutes()
  },
};




./app/components/ui/DarkLigthToggle/DarkLigthToggle.tsx:
"use client"
import { useState, JSX } from "react";
import cloudsBack from "./svgs/clouds-back.svg";
import cloudsFront from "./svgs/clouds-front.svg";
import stars from "./svgs/stars.svg";
import Image from "next/image";

interface Props {
    activate: boolean; // New boolean prop to control the toggle state
    className: string;
}

export const DarkLightToggle = ({ activate, className }: Props): JSX.Element => {
    const [isDark, setIsDark] = useState<boolean>(activate); // Use the `activate` prop directly

    const toggleMode = () => {
        setIsDark((prevIsDark) => !prevIsDark);
    };

    return (
        <div
            className={`relative w-[4.25rem] h-[1.75rem] ${isDark ? "bg-[#242d36]" : "bg-[#1179f4]"} rounded-full overflow-hidden shadow-[inset_0_0.07rem_0.09rem_#00000040,inset_0_-0.05rem_0.14rem_#00000040,0_0.02rem_0.02rem_#fffffff0,0_-0.02rem_0.02rem_#00000040] ${className} transition-colors duration-500`}
            onClick={toggleMode}
        >
            <div
                className={`absolute ${isDark ? "w-[4.88rem]" : "w-[5.88rem]"} ${isDark ? "left-[0.42rem]" : "left-[-1.29rem]"} ${isDark ? "top-[-1.22rem]" : "top-[-1.22rem]"} transition-all duration-500`}
            >
                <div className={`absolute w-[4.18rem] h-[4.18rem] ${isDark ? "left-0" : "left-0"} top-0`}>
                    <div className="relative h-[4.18rem] rounded-full">
                        <div className="absolute w-[2.25rem] h-[2.25rem] top-[0.97rem] left-[0.97rem] bg-[#ffffff1a] rounded-full" />
                        <div className="absolute w-[3.18rem] h-[3.18rem] top-[0.51rem] left-[0.51rem] bg-[#ffffff1a] rounded-full" />
                        <div className="absolute w-[4.18rem] h-[4.18rem] top-0 left-0 bg-[#ffffff1a] rounded-full" />
                    </div>
                </div>

                <Image
                    className={`absolute ${isDark ? "w-[1.75rem] h-[1.29rem]" : "w-[4.25rem] h-[1.75rem]"} ${isDark ? "left-0 top-[1.44rem]" : "left-[1.29rem] top-[1.22rem]"} transition-transform duration-500`}
                    alt="Clouds back"
                    src={isDark ? stars : cloudsBack}
                />

                {!isDark && (
                    <Image
                        className="absolute w-[4.18rem] h-[1.69rem] top-[1.22rem] left-[1.29rem] transition-transform duration-500"
                        alt="Clouds front"
                        src={cloudsFront}
                    />
                )}

                <div
                    className={`absolute w-[1.38rem] h-[1.38rem] ${isDark ? "left-[1.88rem] top-[1.38rem]" : "left-[1.38rem] top-[1.38rem]"} bg-[#ebcd2c] rounded-full overflow-hidden shadow-[inset_0.03rem_0.05rem_0.05rem_#ffffff99,inset_0_-0.05rem_0.05rem_#82841f] transition-all duration-500`}
                >
                    <div className={`relative h-[1.38rem] ${isDark ? "left-0" : "left-[1.52rem]"} bg-[#c8c8c8] rounded-full shadow-[inset_0.03rem_0.05rem_0.05rem_#ffffff99,inset_0_-0.05rem_0.05rem_#6b6b6b]`}>
                        <div className="relative w-[0.87rem] h-[0.77rem] top-[0.26rem] left-[0.29rem]">
                            <div className="absolute w-[0.18rem] h-[0.18rem] top-0 left-[0.26rem] bg-[#889398] rounded-full shadow-[inset_0_0.01rem_0.05rem_#00000040]" />
                            <div className="absolute w-[0.44rem] h-[0.44rem] top-[0.32rem] left-0 bg-[#889398] rounded-full shadow-[inset_0_0.01rem_0.05rem_#00000040]" />
                            <div className="absolute w-[0.27rem] h-[0.27rem] top-[0.39rem] left-[0.61rem] bg-[#889398] rounded-full shadow-[inset_0_0.01rem_0.05rem_#00000040]" />
                        </div>
                    </div>
                </div>
            </div>

            {isDark && (
                <div className="absolute top-[-5rem] left-[1.5rem] h-[4rem] w-[7rem] transition-transform duration-500">
                    <Image
                        className="absolute top-0 left-0 h-full w-full"
                        alt="Clouds back"
                        src={cloudsBack}
                    />
                    <Image
                        className="absolute top-[10%] left-[10%] h-full w-full"
                        alt="Clouds front"
                        src={cloudsFront}
                    />
                    <Image
                        className="absolute w-[1.75rem] h-[1.29rem] top-[1.44rem] left-0 transition-transform duration-500"
                        alt="Stars"
                        src={stars}
                    />
                </div>
            )}

            {!isDark && (
                <Image
                    className="absolute top-[-4rem] left-[2rem] h-[1.29rem] w-[1.75rem] transition-transform duration-500"
                    alt="Stars"
                    src={stars}
                />
            )}
        </div>
    );
};

./app/components/ui/DarkLigthToggle/DarkLigthToggle.stories.tsx:
import { DarkLightToggle } from "./DarkLigthToggle";

export default {
  component: DarkLightToggle,
  title: 'Base/Dark | Ligth Toggle',
  tags: ['autodocs']
}

export const Sample = {
  args: {
    activate: false
  },
};



